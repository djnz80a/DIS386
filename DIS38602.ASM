
;

INIT_MEMORY:
	;MOV	EAX,[FILE1_SIZE]
	MOV	EAX,10000H
	PUSH	EAX
	CALL	__ALLOC
	POP	ECX
	MOV	[LABEL_MEMORY],EAX
	ADD	EAX,ECX
	MOV	[LABEL_MEMORY_END],EAX


	MOV	EAX,[FILE1_SIZE]
	PUSH	EAX
	CALL	__ALLOC
	POP	ECX
	MOV	[FILE1_CONTENTS_MEMORY],EAX
	ADD	EAX,ECX
	MOV	[FILE1_CONTENTS_MEMORY_END],EAX

	RET

;

DEINIT_MEMORY:
	RET

;
;	BH &1==0 BYTE/==1 (D)WORD
;

BYTE_WORD:
	test	bh,1
	JNE	BYTE_WORD.10
	MOV	AL,@BYTE
	CALL	PUTSTR
	MOV	AL,' '
	CALL	PUTCHR
	RET

BYTE_WORD.10:
	CALL	ISDWORD
	JE	BYTE_WORD.20
BYTE_WORD.15:
	MOV	AL,@WORD
	CALL	PUTSTR
	MOV	AL,' '
	CALL	PUTCHR
	RET
BYTE_WORD.20:
	MOV	AL,'D'
	CALL	PUTCHR
	JMP	BYTE_WORD.15

;
;	BL
;

REG1:
	MOV	AL,BL
	ROR AL,1
	ROR AL,1
	ROR AL,1
	AND	al,07H
;	BIT	0,BH
	test	bh,1
;	JE	$+4
	je	reg1.e
	OR	AL,08H
reg1.e:
	CALL	REG
	RET

;
;	BL:
;

REG2:
	INC	ESI
	PUSH	EDX
	MOV	AL,BL
	CMP	AL,11000000B
	JNB	REG2.10
	AND	al,07H
	MOV	DL,AL
	MOV	AL,BL
	ROR AL,1
	ROR AL,1
	ROR AL,1
	AND	al,18H
	OR	AL,DL
	POP	EDX
	CALL	ADDRESSING
	RET

REG2.10:
	AND	al,07H
	test	bh,1
	je	reg2.10.e
	OR	AL,08H
reg2.10.e:
	CALL	REG
	POP	EDX
	RET

;

REGD:	PUSH	ECX
	MOV	CH,AL
	MOV	AL,[FDWORD]
	PUSH	EAX
	MOV	AL,0FFH
	MOV	[FDWORD],AL
	MOV	AL,CH

	CALL	REG

	POP	EAX
	MOV	[FDWORD],AL
	POP	ECX
	RET
;
;	AL:
;

REG:
	PUSH	EBX
	PUSH	EDX

	CMP	AL,08H
	JB	REG.50
	CMP	AL,10H
	JNB	REG.50

	PUSH	EAX
	CALL	ISDWORD
	JNE	REG.40
	MOV	AL,'E'
	CALL	PUTCHR
REG.40:
	POP	EAX

REG.50:
	XOR	EBX,EBX
	MOV	BL,AL
	MOV	EDX,REG_TBL
	ADD	EBX,EDX
	MOV	AL,[EBX]
	CALL	PUTSTR

	POP	EDX
	POP	EBX
	RET

REG_TBL:
	DB	@AL
	DB	@CL
	DB	@DL
	DB	@BL
	DB	@AH
	DB	@CH
	DB	@DH
	DB	@BH

	DB	@AX
	DB	@CX
	DB	@DX
	DB	@BX
	DB	@SP
	DB	@BP
	DB	@SI
	DB	@DI

	DB	@ES
	DB	@CS
	DB	@SS
	DB	@DS

	DB	@FS
	DB	@GS
	DB	@REGX
	DB	@REGX

;
;
;

ADDRESSING:
	CALL	IS386
	JE	ADDRESSING2

	PUSH	EAX
	MOV	AL,'['
	CALL	PUTCHR
	POP	EAX

	PUSH	EBX
	CMP	AL,00110B
	JE	ADDRESSING.10

	PUSH	EAX
	PUSH	EDX
	AND	al,07H
	XOR	EBX,EBX
	MOV	BL,AL
	ADD	EBX,EBX
	MOV	EDX,ADDRESSING_TBL
	ADD	EBX,EDX
	POP	EDX
	MOV	AL,[EBX]
	CALL	PUTSTR
	INC	EBX
	MOV	AL,[EBX]
	OR	AL,AL
	JE	ADDRESSING.05

	PUSH	EAX
	MOV	AL,'+'
	CALL	PUTCHR
	POP	EAX

	CALL	PUTSTR
ADDRESSING.05:
	POP	EAX
	AND	al,11000B
	CMP	AL,00000B
	JE	ADDRESSING.09
	CMP	AL,01000B
	JE	ADDRESSING.06
	CMP	AL,10000B
	JE	ADDRESSING.07

ADDRESSING.06:
	CALL	DISP8
	JMP	ADDRESSING.09

ADDRESSING.07:
	CALL	DISP16

ADDRESSING.09:
	MOV	AL,']'
	CALL	PUTCHR
	POP	EBX
	RET

ADDRESSING.10:
	MOV	BX,[ESI]
	CALL	PUTINT
	INC	ESI
	INC	ESI
	MOV	AL,']'
	CALL	PUTCHR
	CALL	INC_BYTE
	CALL	INC_BYTE
	POP	EBX
	RET

ADDRESSING_TBL:
	DB	@BX,@SI
	DB	@BX,@DI
	DB	@BP,@SI
	DB	@BP,@DI
	DB	@SI,00H
	DB	@DI,00H
	DB	@BP,00H
	DB	@BX,00H

;

ADDRESSING2:

	PUSH	EBX

	CMP	AL,00100B
	JE	ADDRESSING2.P0
	CMP	AL,01100B
	JE	ADDRESSING2.P0
	CMP	AL,10100B
	JE	ADDRESSING2.P0
	CMP	AL,00101B
	JE	ADDRESSING2.10

	PUSH	EAX
	MOV	AL,'['
	CALL	PUTCHR
	POP	EAX
	PUSH	EAX
	AND	al,07H
	ADD	AL,8
	CALL	REGD
	POP	EAX
	AND	al,11000B
	CMP	AL,00000B
	JE	ADDRESSING2.09
	CMP	AL,01000B
	JE	ADDRESSING2.06
	CMP	AL,10000B
	JE	ADDRESSING2.07

ADDRESSING2.06:
	CALL	DISP8
	JMP	ADDRESSING.09

ADDRESSING2.07:
	CALL	DISP32

ADDRESSING2.09:
	MOV	AL,']'
	CALL	PUTCHR
	POP	EBX
	RET

ADDRESSING2.10:
	MOV	AL,'['
	CALL	PUTCHR

	;MOV	BX,[SI]
	;MOV	DX,[SI+2]
	MOV	EBX,[ESI]
	CALL	PUTDINT
	INC	ESI
	INC	ESI
	INC	ESI
	INC	ESI
	MOV	AL,']'
	CALL	PUTCHR
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	POP	EBX
	RET

ADDRESSING2.P0:
	CALL	INC_BYTE

	PUSH	EAX	;1st
	AND	al,11000B
	CMP	AL,00000B

	MOV	AL,[ESI+0]
	PUSH	EAX
	JNE	ADDRESSING2.P0.05

	AND	al,07H
	CMP	AL,101B
	JE	ADDRESSING2.P0.10

ADDRESSING2.P0.05:
	AND	al,07H
	ADD	AL,8
	CALL	REGD
	JMP	ADDRESSING2.P0.12

ADDRESSING2.P0.10:

	;MOV	BX,[SI+1]
	;MOV	DX,[SI+3]
	MOV	EBX,[ESI+1]
	CALL	PUTDINT
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE

ADDRESSING2.P0.12:
	MOV	AL,'['
	CALL	PUTCHR
	POP	EAX

	PUSH	EAX	;2nd
	ROR AL,1
	ROR AL,1
	ROR AL,1
	AND	al,07H
	ADD	AL,8
	CMP	AL,0CH	;SP
	JE	ADDRESSING.P0.15

	CALL	REGD
ADDRESSING.P0.15:
	POP	EAX

	AND	al,0C0H
	CMP	AL,00H
	JE	ADDRESSING2.P0.50
	MOV	CH,'2'
	CMP	AL,40H
	JE	ADDRESSING2.P0.20
	MOV	CH,'4'
	CMP	AL,80H
	JE	ADDRESSING2.P0.20
	MOV	CH,'8'
	CMP	AL,0C0H
	JE	ADDRESSING2.P0.20

ADDRESSING2.P0.20:
	MOV	AL,'*'
	CALL	PUTCHR
	MOV	AL,CH
	CALL	PUTCHR

ADDRESSING2.P0.50:
	POP	EAX	;1st
	AND	al,11000B
	CMP	AL,00H
	JE	ADDRESSING2.P0.90
;	PUSH	AX
;	MOV	AL,'+'
;	CALL	PUTCHR
;	POP	AX
	CMP	AL,01000B
	JE	ADDRESSING2.P0.60
	CMP	AL,10000B
	JE	ADDRESSING2.P0.70
ADDRESSING2.P0.60:
	MOV	AL,[ESI+1]
	INC	ESI
	CALL	DISP8
	JMP	ADDRESSING2.P0.90
ADDRESSING2.P0.70:
	MOV	BX,[ESI+1]
	MOV	DX,[ESI+3]
	INC	ESI
	CALL	DISP32

ADDRESSING2.P0.90:
	MOV	AL,']'
	CALL	PUTCHR
	POP	EBX
	RET



;
;
;

DISP8:	MOV	AL,[ESI+00H]
	INC	ESI
	test	al,80h
	JNE	DISP8.10

	PUSH	EAX
	MOV	AL,'+'
	CALL	PUTCHR
	POP	EAX
	;CALL	PUTHEX_A2
	MOV	BL,AL
	CALL	PUT_HEXB_H
	JMP	DISP8.20
DISP8.10:
	PUSH	EAX
	MOV	AL,'-'
	CALL	PUTCHR
	POP	EAX
	NEG	al
	;CALL	PUTHEX_A2
	MOV	BL,AL
	CALL	PUT_HEXB_H
DISP8.20:
	CALL	INC_BYTE
	RET

;
;
;

DISP16:
	PUSH	EBX
	MOV	BX,[ESI]
	INC	ESI
	INC	ESI

	test	bh,80h
	JNE	DISP16.10

	MOV	AL,'+'
	CALL	PUTCHR
	;CALL	PUTHEX2

	CALL	PUT_HEXW_H

	JMP	DISP16.20
DISP16.10:
	MOV	AL,'-'
	CALL	PUTCHR

	NEG	BX

	;CALL	PUTHEX2

	CALL	PUT_HEXW_H

DISP16.20:
	;MOV	AL,'H'
	;CALL	PUTCHR
	POP	EBX
	CALL	INC_BYTE
	CALL	INC_BYTE
	RET
;
;
;

DISP32:
	PUSH	EBX
	MOV	BX,[ESI]
	MOV	DX,[ESI+2]
	INC	ESI
	INC	ESI
	INC	ESI
	INC	ESI

	TEST	DH,80H		;### fix
	JNE	DISP32.10
	MOV	AL,'+'
	CALL	PUTCHR
	;CALL	PUTHEX4

	PUSH	EBX
	ROL	EBX,10H
	MOV	BX,DX
	ROL	EBX,10H
	CALL	PUT_HEXL_H
	POP	EBX
	JMP	DISP32.20
DISP32.10:
	MOV	AL,'-'
	CALL	PUTCHR

	NOT	BX
	NOT	DX
	INC	BX
	JNE	DISP32.15
	INC	DX
DISP32.15:
	;CALL	PUTHEX4
	PUSH	EBX
	ROL	EBX,10H
	MOV	BX,DX
	ROL	EBX,10H
	CALL	PUT_HEXL_H
	POP	EBX

DISP32.20:
	;MOV	AL,'H'
	;CALL	PUTCHR
	POP	EBX
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	RET

;
;	BH &1==0 AL/==1 (E)AX
;

ACC:
	test	bh,1
	JNE	ACCAX

	MOV	AL,@AL
	CALL	PUTSTR
	RET
ACCAX:
	CALL	ISDWORD
	JE	ACC.20

ACC.15:	MOV	AL,@AX
	CALL	PUTSTR
	RET

ACC.20:	MOV	AL,'E'
	CALL	PUTCHR
	JMP	ACC.15
;
;
;

S_IMM:	MOV	AL,BH
	AND	al,03H
	CMP	AL,01B
	JE	S_IMM.10
	CMP	AL,11B
	JE	S_IMM.20

	MOV	AL,[ESI+00H]
	INC	ESI
	CALL	PUTHEX_A2
	CALL	INC_BYTE
	RET

S_IMM.10:
	CALL	ISDWORD
	JE	S_IMM.15

	PUSH	EBX
	MOV	BX,[ESI]
	INC	ESI
	INC	ESI
	CALL	PUTINT
	POP	EBX
	CALL	INC_BYTE
	CALL	INC_BYTE
	RET
S_IMM.15:
	PUSH	EBX
	;MOV	BX,[SI+0]
	;MOV	DX,[SI+2]
	MOV	EBX,[ESI]
	INC	ESI
	INC	ESI
	INC	ESI
	INC	ESI
	CALL	PUTDINT
	POP	EBX
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	RET


S_IMM.20:
	PUSH	EBX
	MOV	BL,[ESI+00H]
	INC	ESI

	test	bl,80h
	JNE	S_IMM.25

	PUSH	EBX
	MOV	AL,'+'
	CALL	PUTCHR
	POP	EBX
	MOV	AL,BL
	JMP	S_IMM.26

S_IMM.25:
	PUSH	EBX
	MOV	AL,'-'
	CALL	PUTCHR
	POP	EBX
	MOV	AL,BL
	NEG	al

S_IMM.26:
	CALL	PUTHEX_A2

;	MOV	AL,'H'
;	CALL	PUTCHR

	POP	EBX
	CALL	INC_BYTE
	RET

;
;	immediate 8/16 bit
;

IMM:	PUSH	EBX

	test	bh,1
	JNE	IMM.10
	MOV	AL,[ESI+00H]
	INC	ESI
	CALL	PUTHEX_A2
	CALL	INC_BYTE
	POP	EBX
	RET
IMM.10:
	CALL	ISDWORD
	JE	IMM.15

	MOV	BX,[ESI]
	INC	ESI
	INC	ESI
	CALL	PUTINT
	CALL	INC_BYTE
	CALL	INC_BYTE
	POP	EBX
	RET
IMM.15:
	;MOV	BX,[SI+0]
	;MOV	DX,[SI+2]
	MOV	EBX,[ESI]
	INC	ESI
	INC	ESI
	INC	ESI
	INC	ESI
	CALL	PUTDINT
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	POP	EBX
	RET

;
;	Undefined Mnemonic
;

UNDEF:
	POP	EAX

	MOV	AL,'D'
	CALL	PUTCHR
	MOV	AL,'B'
	CALL	PUTCHR
	CALL	TAB2

	MOV	EBX,[PNT]
	MOV	AL,[BYTES]
	MOV	CH,AL
	INC	CH
UNDEF.10:
	DEC	CH
	JE	UNDEF.15
	PUSH	EBX
	PUSH	ECX
	MOV	AL,[EBX]
	CALL	PUTHEX_A2
;	MOV	AL,'H'
;	CALL	PUTCHR
	POP	ECX
	POP	EBX
	INC	EBX
	DEC	CH
	MOV	AL,','
;	CALL	NZ,PUTCHR
	je	undef.z
	call	putchr
undef.z:
	INC	CH
	JMP	UNDEF.10
UNDEF.15:
	JMP	MAIN_N

;
;
;

MAIN_N:
	MOV	AL,[FFDWORD]
	MOV	[FDWORD],AL

	MOV	AL,[FF386]
	MOV	[F386],AL

MAIN_N3:
	mov	al,0afh
	jmp	main_n2.skip

MAIN_N2:XOR	AL,AL
		DEC	DWORD [MON_LINE]

main_n2.skip:
	MOV	[OUT_FLG],AL

;	MOV	AL,30
;	MOV	[X],AL

	JMP	MAIN_N.1

	MOV	AL,';'
	CALL	PUTCHR

MAIN_N.1:
	CMP	BYTE [FLG.M],0
	JNE	MAIN_N.5

	MOV	EBX,[ADR]
	MOV	AL,[BYTES]
	MOV	CL,AL
	MOV	CH,0
MAIN_N.2:
	INC	EBX
	INC	CH
	DEC	CL
	JE	MAIN_N.5
	PUSH	EBX
	PUSH	ECX
	CALL	SEARCH_LABEL
	POP	ECX
	POP	EBX
	JB	MAIN_N.2

MAIN_N.4:
	pushaD
	MOV	AL,'_'
	CALL	DOS02
	popaD
	pushaD
	MOV	AL,BH
	CALL	B_PUTHEX
	MOV	AL,BL
	CALL	B_PUTHEX

	;PUSH	EBX
	;CALL	PUT_LBL_H
	;POP	EBX

	MOV	AL,09H
	CALL	DOS02
	MOV	AL,'E'
	CALL	DOS02
	MOV	AL,'Q'
	CALL	DOS02
	MOV	AL,'U'
	CALL	DOS02
	MOV	AL,09H
	CALL	DOS02
	MOV	AL,'$'
	CALL	DOS02
	MOV	AL,'+'
	CALL	DOS02
	MOV	AL,CH
	ADD	AL,'0'
	CALL	DOS02
	CALL	CRLF
	popaD
	JMP	MAIN_N.2

MAIN_N.5:
	MOV	AL,[BYTES]
	XOR	ECX,ECX
	MOV	CL,AL
	MOV	EBX,[PNT]
	ADD	EBX,CX
	MOV	[PNT],EBX

	MOVZX	ECX,CX
	MOV	EBX,[ADR]
	ADD	EBX,ECX
	MOV	[ADR],EBX

	MOV	AL,[MAX_X]
	OR	AL,AL
	JE	MAIN_N.5.50
	MOV	CH,AL
	MOV	EBX,BUFFER
MAIN_N.5.0:
	MOV	AL,[EBX]
	CMP	AL,20H
	JE	MAIN_N.10
	CMP	AL,09H
	JE	MAIN_N.10
	JMP	MAIN_N.6	;MAIN_N.5.50
MAIN_N.10:
	INC	EBX
	dec	ch
	jne	main_n.5.0
	JMP	MAIN_N.40


MAIN_N.5.50:
	MOV	AL,[OUT_FLG]
	OR	AL,AL
	JE	MAIN_N.40
MAIN_N.6:
	MOV	AL,[MAX_X]
	XOR	ECX,ECX
	MOV	CL,AL
	MOV	EBX,BUFFER
	ADD	EBX,CX
	INC	EBX
	MOV	BYTE [EBX],00H

	MOV	CH,0
	MOV	EBX,BUFFER
MAIN_N.20:
	MOV	AL,[EBX]
	OR	AL,AL
	JE	MAIN_N.30
	CALL	DOS02
	CMP	AL,09H
	JE	MAIN_N.25
	INC	CH
	INC	EBX
	JMP	MAIN_N.20
MAIN_N.25:
	INC	CH
	INC	EBX
	MOV	AL,CH
	AND	al,07H
	JNE	MAIN_N.25
	JMP	MAIN_N.20

MAIN_N.30:

	CALL	CRLF
MAIN_N.40:
	MOV	EDX,[ADR]
	MOV	EBX,[END_ADR]
	CMP	EBX,EDX
	JB	MAIN_END	;if ADR > END_ADR

	JMP	MAIN

MAIN_END:
	RET

;
;
;
CON_PUTHEX4:
	PUSH	EAX
	SHR	EAX,10H
	CALL	CON_PUTHEX2
	POP	EAX
	CALL	CON_PUTHEX2
	RET

;
;
;

CON_PUTHEX2:
	PUSH	EAX
	SHR	EAX,8
	CALL	CON_PUTHEX
	POP	EAX
	CALL	CON_PUTHEX
	RET

;
;
;

CON_PUTHEX:
	PUSH	EAX
	ROR AL,1
	ROR AL,1
	ROR AL,1
	ROR AL,1
	CALL	CON_PUTHEX.10
	POP	EAX
CON_PUTHEX.10:
	AND	al,0FH
	CMP	AL,10
;	JB	$+4
	jb	con_puthex.10.b
	ADD	AL,7
con_puthex.10.b:
	ADD	AL,'0'
	CALL	CON_PUTCHR
	RET

;
;
;

CON_PUTCHR:
	PUSH	ESI
	PUSH	EDI
	PUSH	EBX
	PUSH	EDX
	PUSH	ECX
	PUSH	EAX

;	MOV	CL,02H
;	MOV	DL,AL
;	CALL	0005H
	mov	ah,02h
	mov	dl,al
	CALL	_PUTCHR	;int	21h

	POP	EAX
	POP	ECX
	POP	EDX
	POP	EBX
	POP	EDI
	POP	ESI
	RET

;
;
;

B_PUTHEX:
	PUSH	EAX
	ROR AL,1
	ROR AL,1
	ROR AL,1
	ROR AL,1
	CALL	B_PUTHEX.1
	POP	EAX
B_PUTHEX.1:
	AND	al,0FH
	CMP	AL,10
;	JB	$+4
	jb	b_puthex.b
	ADD	AL,7
b_puthex.b:
	ADD	AL,'0'
	JMP	DOS02

;
;
;

SEP:	MOV	AL,[COUNT]
	OR	AL,AL
	JNE	SEP.1
	CALL	TAB
	JMP	SEP.2
SEP.1:	MOV	AL,','
	CALL	PUTCHR;DOS02
SEP.2:	MOV	AL,[COUNT]
	INC	AL
	MOV	[COUNT],AL
	RET

;
;
;

PUTSTR:	PUSH	EBX
	PUSH	EDX
	PUSH	ECX
	CMP	AL,128
	JNB	PUTSTR2
	MOV	EDX,DATA
PUTSTR.1:
	MOVZX	EBX,AL

	ADD	EBX,EBX		;*6
	MOV	ECX,EBX
	ADD	EBX,EBX
	ADD	EBX,ECX

	ADD	EBX,EDX
	MOV	CH,6
PUTSTR.2:
	MOV	AL,[EBX]
	CMP	AL,' '
	JE	PUTSTR.3
	CALL	PUTCHR;DOS02
	INC	EBX
	dec	ch
	jne	putstr.2

PUTSTR.3:
	POP	ECX
	POP	EDX
	POP	EBX
	RET

PUTSTR2:
	SUB	AL,128
	MOV	EDX,DATA2
	JMP	PUTSTR.1

;
;
;

PUTHEXD:MOV	AL,DH
	CALL	PUTHEX_A
	MOV	AL,DL
	CALL	PUTHEX_A
	;JR	PUHEX
;
;
;

PUTHEX:	MOV	AL,BH
	CALL	PUTHEX_A
	MOV	AL,BL
	CALL	PUTHEX_A
	RET

;

PUTHEX4:
		PUSH	EBX
		ROL	EBX,10H
		MOV	BX,DX
		ROL	EBX,10H

		CALL	PUT_LBL_H
		POP	EBX
		RET

	PUSH	BX
	MOV	AL,DH
	CMP	AL,0A0H
	JB	PUTHEX4.10
	MOV	AL,'0'
	CALL	PUTCHR
PUTHEX4.10:
	CALL	PUTHEXD

	POP	BX
	RET

;
;	Put Hex. 2 byte
;

PUTHEX2:
		PUSH	EBX
		MOVZX	EBX,BX
		CALL	PUT_LBL_H
		POP	EBX
		RET

	PUSH	BX

	MOV	AL,BH
	CMP	AL,0A0H
	JB	PUTHEX2.10
	MOV	AL,'0'
	CALL	PUTCHR
PUTHEX2.10:
	CALL	PUTHEX

	POP	BX
	RET

;
;
;

PUTHEX_A:
	PUSH	EAX
	ROR AL,1
	ROR AL,1
	ROR AL,1
	ROR AL,1
	CALL	PUTHEX_A.1
	POP	EAX
PUTHEX_A.1:
	AND	al,0FH
	CMP	AL,10
;	JB	$+4
	jb	puthex_a.b
	ADD	AL,7
puthex_a.b:
	ADD	AL,'0'
	CALL	PUTCHR;DOS02
	RET

;
;	Put Hex. 1 byte
;

PUTHEX_A2:
		PUSH	EBX
		MOV	BL,AL
		CALL	PUT_HEXB_H
		POP	EBX
		RET

	CMP	AL,0A0H
	JB	PUTHEX_A2.10
	PUSH	AX
	MOV	AL,'0'
	CALL	PUTCHR
	POP	AX
PUTHEX_A2.10:
	CALL	PUTHEX_A
	MOV	AL,'H'
	CALL	PUTCHR
	RET

;************
;
;

PUT_LBL_H:
	PUSHAD

	MOV	CL,0
	CMP	EBX,9
	JBE	PUT_LBL_H.15
	ADD	CL,4
	CMP	EBX,9FH
	JBE	PUT_LBL_H.15
	ADD	CL,4
	CMP	EBX,9FFH
	JBE	PUT_LBL_H.15
	ADD	CL,4
	CMP	EBX,9FFFH
	JBE	PUT_LBL_H.15
	ADD	CL,4
	CMP	EBX,9FFFFH
	JBE	PUT_LBL_H.15
	ADD	CL,4
	CMP	EBX,9FFFFFH
	JBE	PUT_LBL_H.15
	ADD	CL,4
	CMP	EBX,9FFFFFFH
	JBE	PUT_LBL_H.15
	ADD	CL,4
	CMP	EBX,9FFFFFFFH
	JBE	PUT_LBL_H.15

	PUSH	EBX
	MOV	AL,'0'
	CALL	PUTCHR
	POP	EBX

	PUSH	EBX
	MOV	CL,-4
PUT_LBL_H.10:
	ADD	CL,4
	SHR	EBX,4
	OR	EBX,EBX
	JNE	PUT_LBL_H.10
	POP	EBX

PUT_LBL_H.15:
	ROR	EBX,CL
PUT_LBL_H.20:
	PUSH	EBX
	PUSH	ECX
	MOV	AL,BL
	CALL	PUT_H	;CALL	PUT_HEX
	POP	ECX
	POP	EBX
	OR	CL,CL
	JE	PUT_LBL_H.30
	ROL	EBX,4
	SUB	CL,4
	JMP	PUT_LBL_H.20

PUT_LBL_H.30:
	POPAD
	RET




	CALL	PUT_HEXW
	RET

;
POSTH:
	CMP	EBX,10
	JB	POSTH.R
	MOV	AL,'h'
	CALL	PUTCHR
POSTH.R:
	RET

;
PUT_HEXB_H:
	PUSH	EBX
	MOVZX	EBX,BL
	PUSH	EBX
	CALL	PUT_LBL_H
	POP	EBX
	CALL	POSTH
	POP	EBX
	RET

;
;
;
PUT_HEXW_H:
	;CALL	PUT_HEXW
		MOVZX	EBX,BX
		PUSH	EBX
		CALL	PUT_LBL_H
		POP	EBX
		JMP	POSTH

	MOV	AL,'h'
	CALL	PUTCHR
	RET

PUT_HEXL_H:
	;CALL	PUT_HEXL
		PUSH	EBX
		CALL	PUT_LBL_H
		POP	EBX
		JMP	POSTH

	MOV	AL,'h'
	CALL	PUTCHR
	RET


;
;
;
PUT_HEXL:
		JMP	PUT_LBL_H

	MOV	AL,'0'
	CALL	PUTCHR
	PUSH	BX
	SHR	EBX,10H
	MOV	AL,BH
	CALL	PUT_HEX
	MOV	AL,BL
	CALL	PUT_HEX
	POP	BX
	MOV	AL,BH
	CALL	PUT_HEX
	MOV	AL,BL
	CALL	PUT_HEX
	RET


PUT_HEXW:
		MOVZX	EBX,BX
		JMP	PUT_LBL_H

	MOV	AL,'0'
	CALL	PUTCHR
	MOV	AL,BH
	CALL	PUT_HEX
	MOV	AL,BL
	CALL	PUT_HEX
	RET

PUT_HEXB:
		MOVZX	EBX,BL
		JMP	PUT_LBL_H

	MOV	AL,'0'
	CALL	PUTCHR
	MOV	AL,BL
	CALL	PUT_HEX
	RET

PUT_HEX:
	PUSH	EAX
	SHR	AL,4
	CALL	PUT_H
	POP	EAX
PUT_H:
	AND	AL,0FH
	CMP	AL,10
	JB	PUT_H.10
	ADD	AL,7
PUT_H.10:
	ADD	AL,'0'
	CALL	PUTCHR
	RET



;*********
;
;
;

CRLF:	MOV	AL,0DH
	CALL	DOS02
	MOV	AL,0AH
	JMP	DOS02

COMMA:	PUSH	EAX
	MOV	AL,','
	CALL	PUTCHR
	POP	EAX
	RET

;
;
;

TAB:	JMP	TAB2

	MOV	AL,[X]
	MOV	CH,AL
TAB.10:
	INC	CH
	MOV	AL,' '
	CALL	PUTCHR
	MOV	AL,CH
	AND	al,07H
	JNE	TAB.10

	MOV	AL,CH
	MOV	[X],AL
	POP	ECX
	RET

;

TAB2:	PUSH	ECX
	MOV	AL,[X]
	MOV	CH,AL
	MOV	AL,09H
TAB2.10:
	INC	CH
	CALL	PUTCHR
	MOV	AL,CH
	AND	al,07H
	MOV	AL,' '
	JNE	TAB.10

	MOV	AL,CH
	MOV	[X],AL
	POP	ECX
	RET

;
;
;

PUTCHR:
;	CMP	BYTE [FLG.M],0
;	JE	PUTCHR.NOTMON
;		PUSHAD
;		MOV	AH,2
;		MOV	DL,AL
;		INT	21H
;		POPAD
;		RET

	PUSH	EBX
	PUSH	ECX

	MOV	CH,AL
	MOV	AL,[X]
	MOV	CL,AL
	INC	AL
	MOV	[X],AL		;X ++

	MOV	AL,[MAX_X]
	CMP	AL,CL
	JNB	PUTCHR.10	;if X <= MAX_X
	MOV	AL,CL
	MOV	[MAX_X],AL	;MAX_X = X
PUTCHR.10:
	MOV	AL,CH
	MOVZX	ECX,CL
	MOV	EBX,BUFFER
	ADD	EBX,ECX
	MOV	[EBX],AL		;[ BUFFER + X ] = AL

	POP	ECX
	POP	EBX
	RET

;#define INVALID_HANDLE_VALUE ((HANDLE)(LONG_PTR)-1)

INVALID_HANDLE_VALUE EQU -1

;
;3d00	open
;	edx=filename
;	>ax handle
;	>cf=1 : error
INT21_open:

	PUSHAD
	MOV	AL,'['
	CALL	_PUTCHR	;DOS02
	MOV	ESI,EDX
	CALL	_PUTSTR
	MOV	AL,']'
	CALL	_PUTCHR	;DOS02
	CALL	_PUTCRLF
	POPAD

	PUSH	0		;templateFile
	PUSH	FILE_ATTRIBUTE_NORMAL
	PUSH	OPEN_EXISTING	;CREATE_ALWAYS	;CREATE_NEW
	PUSH	0		;securityAttribute
	PUSH	0		;shareMode
	PUSH	GENERIC_READ
	PUSH	EDX		;FILENAME_TEST1
	CALL	[IAT_CreateFileA]
	CMP	EAX,INVALID_HANDLE_VALUE
	JE	INT21_open.ERR

	;MOV	[HDL_INFILE],EAX

	CLC
	RET
INT21_open.ERR:
	STC
	RET

;
;3c00	create
;	edx=filename
;	>ax handle
;	>cf=1 : error

;
INT21_create:

	PUSHAD
	MOV	AL,'['
	CALL	_PUTCHR	;DOS02
	MOV	ESI,EDX
	CALL	_PUTSTR
	MOV	AL,']'
	CALL	_PUTCHR	;DOS02
	CALL	_PUTCRLF
	POPAD

	PUSH	0		;templateFile
	PUSH	FILE_ATTRIBUTE_NORMAL
	PUSH	CREATE_ALWAYS	;CREATE_NEW
	PUSH	0		;securityAttribute
	PUSH	0		;shareMode
	PUSH	GENERIC_WRITE
	PUSH	EDX		;FILENAME_TEST1
	CALL	[IAT_CreateFileA]
	CMP	EAX,INVALID_HANDLE_VALUE
	JE	INT21_create.ERR

	;MOV	[HDL_OUTFILE],EAX

	CLC
	RET
INT21_create.ERR:
	STC
	RET


;#define FILE_BEGIN           0
;#define FILE_CURRENT         1
;#define FILE_END             2

;4200	seek
;	bx=handle
;	cx : dx offset
;
;	> dx : ax current pointer

INT21_seek:
	SHL	ECX,10h
	MOV	CX,DX

	MOVZX	EAX,AL

	PUSH	EAX
	PUSH	0	;size<2GB
	PUSH	ECX
	PUSH	EBX
	CALL	[IAT_SetFilePointer]

	MOV	EDX,EAX
	SHR	EDX,10H
	MOVZX	EAX,AX

	CLC

;erro check?

	RET

INT21_getfilepointer:
	


;
;3f00	read
;	bx=handle
;	edx=buf
;	ecx=bytes
;	>eax read bytes

INT21_read:
	
	PUSH	0
	PUSH	N_READ
	PUSH	ECX
	PUSH	EDX	;READ_BUF
	PUSH	EBX	;[HDL_STDOUT]
	CALL	[IAT_ReadFile]
	OR	EAX,EAX
	JE	INT21_read.ERR

	MOV	EAX,[N_READ]
	CLC
	RET
INT21_read.ERR:
	XOR	EAX,EAX
	STC
	RET

;4000	write
;	bx=handle
;	edx=buf
;	ecx=bytes
;	>eax wrote bytes
;	cf=1 : error	
;
;4000	write/truncate
;	ecx=edx=0
;	bx=handle

INT21_write:
	XOR	EAX,EAX
	MOV	AX,CX
	OR	AX,DX
	JE	INT21_truncate

	PUSH	0
	PUSH	N_WROTE
	PUSH	ECX
	PUSH	EDX	;READ_BUF
	PUSH	EBX	;[HDL_STDOUT]
	CALL	[IAT_WriteFile]
	OR	EAX,EAX
	JE	INT21_write.ERR

	MOV	EAX,[N_WROTE]

	CLC
	RET

INT21_write.ERR:
	XOR	EAX,EAX
	STC
	RET


INT21_truncate:
	PUSH	EBX
	CALL	[IAT_SetEndOfFile]
	RET


;3e00	close
;	bx=handle
;	cf=1 : error
INT21_close:

	PUSH	EBX
	CALL	[IAT_CloseHandle]
	OR	EAX,EAX
	JE	INT21_close.ERR

	CLC
	RET

INT21_close.ERR:
	STC
	RET


;4c	exit
;	al=code

INT21_exit:
	MOVZX	EAX,AL
	PUSH	EAX
	CALL	[IAT_ExitProcess]

	RET

INT21_putchr:
	CALL	_PUTCHR
	RET


DOS09:
;	PUSH	EAX
;	MOV	AH,09H
;	INT	21H
;	POP	EAX

	PUSHAD
DOS09.1:
	MOV	AL,[EDX]
	CMP	AL,'$'
	JE	DOS09.R
	PUSH	EDX
	CALL	_PUTCHR	;DOS02
	POP	EDX
	INC	EDX
	JMP	DOS09.1

DOS09.R:
	POPAD
	RET

;	line input

DOS0A:
	RET


;
;
;

DOS02:
	CMP	BYTE [FLG.M],0
	JE	DOS02.NOTMON

	CMP	BYTE [OUT_FLG],0
	JE	DOS02.NOTOUT
	PUSHAD
	MOV	AH,2
	MOV	DL,AL
	CALL	_PUTCHR	;INT	21H
	POPAD
DOS02.NOTOUT:
	RET

DOS02.NOTMON:
	PUSH	ESI
	PUSH	EDI
	PUSH	EBX
	PUSH	EDX
	PUSH	ECX
	PUSH	EAX

	CALL	WRITE

;	MOV	CL,02H
;	MOV	DL,AL
;	CALL	0005H

	POP	EAX
	POP	ECX
	POP	EDX
	POP	EBX
	POP	EDI
	POP	ESI
	RET


;
;
;
INC_BYTE:
	INC	BYTE [BYTES]
	RET

	PUSH	AX
	MOV	AL,[BYTES]
	INC	AL
	MOV	[BYTES],AL
	POP	AX
	RET

BYTE_1:	PUSH	EAX
	MOV	AL,1
	JMP	SET_BYTE
BYTE_2:	PUSH	EAX
	MOV	AL,2
	JMP	SET_BYTE
BYTE_3:	PUSH	EAX
	MOV	AL,3
	JMP	SET_BYTE
BYTE_4:	PUSH	EAX
	MOV	AL,4
	JMP	SET_BYTE

SET_BYTE:
	MOV	[BYTES],AL
	POP	EAX
	RET

;
;
;

INC_NAME:
	mov	Ebx,[ext_pnt]
	add	Ebx,2
	MOV	CH,3
INC_NAME.20:
	MOV	AL,[EBX]
	INC	AL
	MOV	[EBX],AL
	CMP	AL,'9'+1
	jb	__ret
	MOV	BYTE [EBX],'0'
	DEC	EBX
	dec	ch
	jne	inc_name.20
	RET
;
;
;

WRITE:	MOV	EBX,PASS
	test	byte [Ebx],1
	jne	__ret

	MOV	EBX,[W_PNT]
	MOV	[EBX],AL
	INC	EBX
	MOV	[W_PNT],EBX

	MOV	EBX,[W_LEFT]
	INC	EBX
	cmp	Ebx,write_bytes
	JE	WRITE.1
	MOV	[W_LEFT],EBX
	RET
WRITE.1:
	mov	ax,4000h	;write
	mov	ebx,[hdl2]
	mov	Ecx,write_bytes
	mov	Edx,w_work
	CALL	INT21_write	;int	21h
	jb	err_write
	cmp	Eax,write_bytes
	jne	err_write

	mov	Ebx,w_work
	mov	[w_pnt],Ebx
	mov	Ebx,0
	mov	[w_left],Ebx

	MOV	EBX,[FILE_SIZE_CNT]
	MOV	EDX,WRITE_BYTES
	ADD	EBX,EDX
	MOV	[FILE_SIZE_CNT],EBX
	MOV	EDX,[CUT_SIZE]
	OR	AL,AL
	SBB	EBX,EDX
	JNB	WRITE.20
	RET

WRITE.20:
	MOV	EBX,0
	MOV	[FILE_SIZE_CNT],EBX

	mov	ax,3e00h	;close
	mov	ebx,[hdl2]
	CALL	INT21_close	;int	21h

	CALL	INC_NAME

	mov	ax,3c00h	;create
	mov	Ecx,0
	mov	Edx,file2
	CALL	INT21_create	;int	21h
	jb	err_make
	mov	[hdl2],eax

	MOV	EBX,W_WORK
	MOV	[W_PNT],EBX
	MOV	EBX,0
	MOV	[W_LEFT],EBX

	RET

ERR_WRITE:
	mov	ax,3e00h	;close
	mov	ebx,[hdl2]
	CALL	INT21_close	;int	21h
	MOV	EDX,EMES_WRITE
	JMP	ERROR

EMES_WRITE:
	DB	'Write error!$'

;
;
;

READ:	MOV	EBX,[R_LEFT]
	OR	EBX,EBX
	JE	READ.1
	DEC	EBX
	MOV	[R_LEFT],EBX
	MOV	EBX,[R_PNT]
	MOV	AL,[EBX]
	INC	EBX
	MOV	[R_PNT],EBX
	OR	AL,AL
	RET

READ.1:	MOV	AL,[R_FLG]
	OR	AL,AL
	JNE	READ.2

	mov	ax,3f00h	;read
	mov	ebx,[hdl1]
	mov	Ecx,read_bytes
	mov	Edx,read_buffer
	CALL	INT21_read	;int	21h
	mov	Eax,Ebx

	MOV	[R_LEFT],EBX
	MOV	[R_FLG],AL
	JMP	READ
READ.2:
;	SCF
	stc
	RET

;
;
;

ERR_ALLOC:
	MOV	EDX,EMES_ALLOC
	JMP	ERROR

ERR_OPEN:
	MOV	EDX,MES_OPEN
	JMP	ERROR

ERR_MAKE:
	MOV	EDX,MES_MAKE
	JMP	ERROR

ERROR:
;	MOV	CL,09H
;	CALL	0005H
	mov	ah,09h
	CALL	DOS09	;int	21h
;	JMP	0000H

	mov	ax,4c01h
	CALL	INT21_exit	;int	21h

MES_OPEN:
	DB	'File open error!$'

MES_MAKE:
	DB	'File make error!$'

;
;	00H - 3FH
;

TBL00:
;
;	C0H - FFH
;

TBLC0:

;
;	ED nn
;

TBLED:

;
;	ED A0 - BF
;

TBLEDA0:

;
;	DD nn
;

TBLDD:
;
;
;
@AAA	EQU	0
@ADC	EQU	1
@ADD	EQU	2
@DAA	EQU	3
@INC	EQU	4
@AAS	EQU	5
@CMP	EQU	6
@DAS	EQU	7
@DEC	EQU	8
@NEG	EQU	9
@SBB	EQU	10
@SUB	EQU	11
@AAM	EQU	12
@IMUL	EQU	13
@MUL	EQU	14
@AAD	EQU	15
@CBW	EQU	16
@CWD	EQU	17
@IDIV	EQU	18
@DIV	EQU	19
@IN	EQU	20
@LAHF	EQU	21
@LDS	EQU	22
@LEA	EQU	23
@LES	EQU	24
@MOV	EQU	25
@OUT	EQU	26
@POP	EQU	27
@POPF	EQU	28
@PUSH	EQU	29
@PUSHF	EQU	30
@SAHF	EQU	31
@XCHG	EQU	32
@XLAT	EQU	33
@AND	EQU	34
@NOT	EQU	35
@OR	EQU	36
@RCL	EQU	37
@RCR	EQU	38
@ROL	EQU	39
@ROR	EQU	40
@SAL	EQU	41
@SAR	EQU	42
@SHR	EQU	43
@TEST	EQU	44
@XOR	EQU	45
@CALL	EQU	46
@INT	EQU	47
@INTO	EQU	48
@IRET	EQU	49
@JA	EQU	50
@JAE	EQU	51
@JB	EQU	52
@JBE	EQU	53
@JCXZ	EQU	54
@JE	EQU	55
@JG	EQU	56
@JGE	EQU	57
@JL	EQU	58
@JLE	EQU	59
@JMP	EQU	60
@JNE	EQU	61
@JNO	EQU	62
@JNP	EQU	63
@JNS	EQU	64
@JO	EQU	65
@JP	EQU	66
@JS	EQU	67
@LOOP	EQU	68
@LOOPE	EQU	69
@LOOPNE	EQU	70
@RET	EQU	71
@CMPSB	EQU	72
@CMPS	EQU	73
@LODSB	EQU	74
@LODS	EQU	75
@MOVSB	EQU	76
@MOVS	EQU	77
@SCASB	EQU	78
@SCAS	EQU	79
@STOSB	EQU	80
@STOS	EQU	81
@REP	EQU	82
@REPNE	EQU	83
@CLC	EQU	84
@CLD	EQU	85
@CLI	EQU	86
@CMC	EQU	87
@STC	EQU	88
@STD	EQU	89
@STI	EQU	90
@ESC	EQU	91
@HLT	EQU	92
@LOCK	EQU	93
@NOP	EQU	94
@WAIT	EQU	95
@CS_OV	EQU	96
@DS_OV	EQU	97
@ES_OV	EQU	98
@SS_OV	EQU	99

@ENTER	EQU	100
@LEAVE	EQU	101
@FS_OV	EQU	102
@GS_OV	EQU	103

@ARPL	EQU	104
@BT	EQU	105

@CWDE	EQU	106
@CDQ	EQU	107


@ERROR	EQU	126
@M.OTHER EQU	127

@AL	EQU	128
@CL	EQU	129
@DL	EQU	130
@BL	EQU	131
@AH	EQU	132
@CH	EQU	133
@DH	EQU	134
@BH	EQU	135

@AX	EQU	136
@CX	EQU	137
@DX	EQU	138
@BX	EQU	139
@SP	EQU	140
@BP	EQU	141
@SI	EQU	142
@DI	EQU	143

@ES	EQU	144
@CS	EQU	145
@SS	EQU	146
@DS	EQU	147

@FAR	EQU	148
@NEAR	EQU	149

@BYTE	EQU	150
@WORD	EQU	151

@FS	EQU	152
@GS	EQU	153
@REGX	EQU	154

@SHL	EQU	155
@CR	EQU	156
@GDT	EQU	157
@LDT	EQU	158
@IDT	EQU	159
@MSW	EQU	160

@DR	EQU	161
@TR	EQU	162

@N	EQU	200
@NN	EQU	201
@<N>	EQU	202
@<NN>	EQU	203
@EE	EQU	204
@DD	EQU	205


@OTHER	EQU	255

DATA:	DB	'AAA   '
	DB	'ADC   '
	DB	'ADD   '
	DB	'DAA   '
	DB	'INC   '
	DB	'AAS   '
	DB	'CMP   '
	DB	'DAS   '
	DB	'DEC   '
	DB	'NEG   '
	DB	'SBB   '
	DB	'SUB   '
	DB	'AAM   '
	DB	'IMUL  '
	DB	'MUL   '
	DB	'AAD   '
	DB	'CBW   '
	DB	'CWD   '
	DB	'IDIV  '
	DB	'DIV   '
	DB	'IN    '
	DB	'LAHF  '
	DB	'LDS   '
	DB	'LEA   '
	DB	'LES   '
	DB	'MOV   '
	DB	'OUT   '
	DB	'POP   '
	DB	'POPF  '
	DB	'PUSH  '
	DB	'PUSHF '
	DB	'SAHF  '
	DB	'XCHG  '
	DB	'XLAT  '
	DB	'AND   '
	DB	'NOT   '
	DB	'OR    '
	DB	'RCL   '
	DB	'RCR   '
	DB	'ROL   '
	DB	'ROR   '
	DB	'SAL   '
	DB	'SAR   '
	DB	'SHR   '
	DB	'TEST  '
	DB	'XOR   '
	DB	'CALL  '
	DB	'INT   '
	DB	'INTO  '	;48
	DB	'IRET  '
	DB	'JA    '	;50
	DB	'JAE   '
	DB	'JB    '
	DB	'JBE   '
	DB	'JCXZ  '
	DB	'JE    '
	DB	'JG    '
	DB	'JGE   '
	DB	'JL    '
	DB	'JLE   '
	DB	'JMP   '	;60
	DB	'JNE   '
	DB	'JNO   '
	DB	'JNP   '
	DB	'JNS   '
	DB	'JO    '
	DB	'JP    '
	DB	'JS    '
	DB	'LOOP  '
	DB	'LOOPE '
	DB	'LOOPNE'	;70
	DB	'RET   '
	DB	'CMPSB '
	DB	'CMPS  '
	DB	'LODSB '
	DB	'LODS  '
	DB	'MOVSB '
	DB	'MOVS  '
	DB	'SCASB '
	DB	'SCAS  '
	DB	'STOSB '	;80
	DB	'STOS  '
	DB	'REP   '
	DB	'REPNE '
	DB	'CLC   '
	DB	'CLD   '
	DB	'CLI   '
	DB	'CMC   '
	DB	'STC   '
	DB	'STD   '
	DB	'STI   '	;90
	DB	'ESC   '
	DB	'HLT   '
	DB	'LOCK  '
	DB	'NOP   '
	DB	'WAIT  '
	DB	'CS:   '
	DB	'DS:   '
	DB	'ES:   '
	DB	'SS:   '

	DB	'ENTER '
	DB	'LEAVE '
	DB	'FS:   '
	DB	'GS:   '

	DB	'ARPL  '
	DB	'BT    '

	DB	'CWDE  '
	DB	'CDQ   '


DATA2:	DB	'AL    '
	DB	'CL    '
	DB	'DL    '
	DB	'BL    '
	DB	'AH    '
	DB	'CH    '
	DB	'DH    '
	DB	'BH    '
	DB	'AX    '
	DB	'CX    '
	DB	'DX    '
	DB	'BX    '
	DB	'SP    '
	DB	'BP    '
	DB	'SI    '
	DB	'DI    '

	DB	'ES    '
	DB	'CS    '
	DB	'SS    '
	DB	'DS    '

	DB	'FAR   '
	DB	'NEAR  '

	DB	'BYTE  '
	DB	'WORD  '

	DB	'FS    '
	DB	'GS    '
	DB	'??    '

	DB	'SHL   '

	DB	'CR    '

	DB	'GDT   '
	DB	'LDT   '
	DB	'IDT   '

	DB	'MSW   '

	DB	'DR    '
	DB	'TR    '
;
;
;

UPPER:	CMP	AL,'a'
	jb	__ret
	CMP	AL,'z'+1
	jnb	__ret
	SUB	AL,20H
	RET

;
;	Get Hex. Value
;
;	[DE] -> BX
;

GETHEX:
	MOV	EBX,0000H
	DEC	EDX
GETHEX.10:
	INC	EDX
	xchg	Ebx,Edx
	mov	al,[Ebx]
	xchg	Ebx,Edx

	CMP	AL,'0'
	jb	__ret
	CMP	AL,'9'+1
	JB	GETHEX.15
	CALL	UPPER
	CMP	AL,'A'
	jb	__ret
	CMP	AL,'F'+1
	jnb	__ret
	SUB	AL,7
GETHEX.15:
	SUB	AL,'0'
	SHL	EBX,4
	OR	AL,BL
	MOV	BL,AL
	JMP	GETHEX.10

;
;	AL data
;	BX poke adrs
;

VPOKE:
	;	ret

	;push	es

	;push	Eax
	;mov	ax,[vram_seg]
	;mov	es,ax
	;pop	Eax

	PUSH	EBX
	AND	EBX,0FFFFH
	;db	26h
	;mov	[Ebx],al

	ADD	EBX,[LABEL_MEMORY]
	MOV	[EBX],AL
	POP	EBX

	;pop	es
	ret

;
;	BX peek adrs
;

VPEEK:
	;	MOV	AL,0
	;	ret

	;push	es
	;mov	ax,[vram_seg]
	;mov	es,ax

	PUSH	EBX
	AND	EBX,0FFFFH
	;db	26h
	;mov	al,[Ebx]

	ADD	EBX,[LABEL_MEMORY]
	MOV	AL,[EBX]
	POP	EBX

	;pop	es
	ret

;
PUT_INT_DINT:
	;CMP	BYTE [F386],0FFH
	CALL	ISDWORD
	JE	PUT_INT_DINT.10

	CALL	PUTINT
	RET

PUT_INT_DINT.10:
	CALL	PUTDINT
	RET

;

PUTINT:
	MOV	AL,[PASS]
	CMP	AL,2
	JE	PUTINT.10

		MOVZX	EBX,BX	;or ignore in 366 mode

	CALL	CHECK_L
	JMP	PUTINT.15
PUTINT.10:
	CALL	SEARCH_LABEL
	JNB	PUTINT.20
PUTINT.15:
	;CALL	PUTHEX2
	;MOV	AL,'H'
	;CALL	PUTCHR

	CALL	PUT_HEXW_H
	RET
PUTINT.20:
	MOV	AL,'_'
	CALL	PUTCHR
	CALL	PUTHEX
	;MOVZX	EBX,BX
	;CALL	PUT_LBL_H
	RET

;

PUTDINT:
	;MOV	AL,DH
	;OR	AL,DL
	;JNE	PUTDINT.15
	;CMP	EBX,10000H
	CMP	EBX,100000H
	JNB	PUTDINT.15

	MOV	AL,[PASS]
	CMP	AL,2
	JE	PUTDINT.10

	JMP	PUTDINT.05

	MOV	AL,DH
	OR	AL,DL
	JE	PUTDINT.05
	MOV	AL,DH
	AND	al,DL
	INC	AL
	JE	PUTDINT.05
	JMP	PUTDINT.15

PUTDINT.05:
	CALL	CHECK_L
	JMP	PUTDINT.15
PUTDINT.10:
	CALL	SEARCH_LABEL
	JNB	PUTDINT.20
PUTDINT.15:
	;CALL	PUTHEX4
	;MOV	AL,'H'
	;CALL	PUTCHR

	PUSH	EBX
	;ROL	EBX,10H
	;MOV	BX,DX
	;ROL	EBX,10H
	CALL	PUT_HEXL_H
	POP	EBX
	RET
PUTDINT.20:
	MOV	AL,'_'
	CALL	PUTCHR

		;CMP	EBX,10000H
		CMP	EBX,100000H
		JNB	PUTDINT.30

	CALL	PUTHEX
	;PUSH	EBX
	;ROL	EBX,10H
	;MOV	BX,DX
	;ROL	EBX,10H
	;CALL	PUT_LBL_H
	;POP	EBX
	RET

PUTDINT.30:
	PUSH	EBX
	;ROL	EBX,10H
	;MOV	BX,DX
	;ROL	EBX,10H
	CALL	PUT_LBL_H
	POP	EBX
	RET


CHECK_L:
;	ret

	JMP	CHECK_L#

;

CHECK_L#:
;	ret

	PUSH	EBX
	PUSH	EDX

	MOV	EDX,[TOP_ADR]
	CMP	EBX,EDX
	JB	CHECK_L#.10

	MOV	EDX,[END_ADR]
	INC	EDX
	CMP	EBX,EDX
	JNB	CHECK_L#.10

	XCHG	EDX,EBX
	CALL	SET_LABEL
	XCHG	EDX,EBX
CHECK_L#.10:
	POP	EDX
	POP	EBX
	RET

;
;	BX peek adrs
;	CY = 1 .. Not Defined Label
;
SEARCH_LABEL:
;	stc
;	ret

	CMP	BYTE [FLG.M],0
	JE	SEARCH_LABEL.NOTMON
	;CLC
	STC
	RET

SEARCH_LABEL.NOTMON:

	PUSH	ECX
	MOV	CH,AL
	MOV	AL,[PASS]
	CMP	AL,2
	JNE	SEARCH_LABEL.10
	CALL	VPEEK
	OR	AL,AL
SEARCH_LABEL.10:
	MOV	AL,CH
	POP	ECX
	je	__ret
	stc
	RET

;
;	DX poke adrs
;
SET_LABEL:
;	ret

	XCHG	EDX,EBX
	MOV	AL,00H
	CALL	VPOKE
	XCHG	EDX,EBX
	RET

;

FILL:
	MOV	EDI,[LABEL_MEMORY]
	MOV	EDX,[LABEL_MEMORY_END]

	MOV	ECX,EDX
	SUB	ECX,EDI
	MOV	AL,0FFH

	CLD
	REP
	STOSB
	RET

;

CLEAR_WORK:
	XOR	AL,AL
	MOV	[X],AL
	MOV	[MAX_X],AL

	MOV	EBX,BUFFER
	MOV	CH,40
	MOV	AL,' '
CLEAR_WORK.10:
	MOV	[EBX],AL
	INC	EBX
	dec	ch
	jne	clear_work.10
	RET

;
;	make z when 386
;

IS386:
	CMP	BYTE [F386],0FFH
	RET

	PUSH	CX
	MOV	CH,AL
	MOV	AL,[F386]
	INC	AL
	MOV	AL,CH
	POP	CX
	RET

ISDWORD:
	CMP	BYTE [FDWORD],0FFH
	RET

	PUSH	CX
	MOV	CH,AL
	MOV	AL,[FDWORD]
	INC	AL
	MOV	AL,CH
	POP	CX
	RET

;
strcpy_f:
	lodsb
	stosb
	or	al,al
	je	strcpy_f.10
	cmp	al,' '
	je	strcpy_f.10
	cmp	al,'/'
	je	strcpy_f.10
	jmp	strcpy_f

strcpy_f.10:
	dec	Edi
	xor	al,al
	stosb
	ret

;
;
;

strcpy:	lodsb
	stosb
	or	al,al
	jne	strcpy
	ret

strcat:	lodsb
	or	al,al
	jne	strcat
	dec	Esi
	xchg	Esi,Edi
	call	strcpy
	ret

__ret:	ret




;
;
;

GETCLINE:
	JMP	GETCLINE_win

GETCLINE_win:

	MOV	ESI,[CMDLINE]
GETCLINE_win.10:
	MOV	AL,[ESI]
	OR	AL,AL
	JE	GETCLINE_win.20
	CMP	AL,' '
	JBE	GETCLINE_win.20
	INC	ESI
	JMP	GETCLINE_win.10

GETCLINE_win.20:

	MOV	EDI,CLINE
GETCLINE_win.30:
	MOV	AL,[ESI]
	CMP	AL,20h
	JB	GETCLINE_win.40
	MOV	[EDI],AL
	INC	ESI
	INC	EDI
	OR	AL,AL
	JMP	GETCLINE_win.30

GETCLINE_win.40:
	MOV	AL,0
	MOV	[EDI],AL

	RET



ERR_PASS1.WORK:
	MOV	EDX,EMES_PASS1.WORK
	JMP	ERROR

ERR_PASS1:
	MOV	EDX,EMES_PASS1
	JMP	ERROR

EMES_PASS1.WORK:
	DB	'Too large Program !$'

EMES_PASS1:
	DB	'Too many Labels !$'

EMES_ALLOC:
	DB	'Alloc failed !$'

MES_CSROFF:
	db	'$'	;DB	1BH,'x5','$'

