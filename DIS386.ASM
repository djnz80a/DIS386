
;
;	Dis-Assembler
;

	ORG	00400000h

IMAGE_BASE equ	00400000h

BASE:

#INCLUDE <HEADER.ASM>

_TEXT:

;+400	".text"

	PUSH	DWORD -10
	CALL	[IAT_GetStdHandle]
	MOV	[HDL_STDIN],EAX

	PUSH	DWORD -11
	CALL	[IAT_GetStdHandle]
	MOV	[HDL_STDOUT],EAX

	PUSH	DWORD -12
	CALL	[IAT_GetStdHandle]
	MOV	[HDL_STDERR],EAX

	CALL	[IAT_GetCommandLineA]
	MOV	[CMDLINE],EAX

	MOV	ESI,EAX
	CALL	_PUTSTR




	;JMP	TEST_HELLO

	;JMP	TEST2
	;JMP	TEST3
	;JMP	TEST4
	;JMP	TEST5
	;JMP	TEST6
	;JMP	TEST7

	JMP	DIS386_MAIN

	PUSH	DWORD -12;-11;	PUSH	0FFFFFFF5h
	;CALL	[IAT_GetStdHandle-_RDATA+_RDATA_RVA+BASE]	;CALL	[00402000h]
	CALL	[IAT_GetStdHandle]

	push	eax

	push	0
	push	N_WROTE	;0
	push	0eh
	;push	STR_HELLO-_DATA+_DATA_RVA+BASE	;00403000h
	push	STR_HELLO
	push	EAX
	;CALL	[IAT_WriteFile-_RDATA+_RDATA_RVA+BASE]	;;call	[00402004h]
	CALL	[IAT_WriteFile]

	pop	eax

	push	0
	mov	ebx,esp;	lea	eax,[esp+0]
	push	0
	push	ebx
	push	0eh
	push	STR_HELLO
	push	eax
	call	[IAT_WriteFile]

	pop	eax

;	XOR	EAX,EAX
	RET


TEST2:
	PUSH	DWORD -10
	CALL	[IAT_GetStdHandle]
	MOV	[HDL_STDIN],EAX

	PUSH	DWORD -11
	CALL	[IAT_GetStdHandle]
	MOV	[HDL_STDOUT],EAX


	PUSH	0
	PUSH	N_READ
	PUSH	100
	PUSH	READ_BUF
	PUSH	[HDL_STDIN]
	call	[IAT_ReadFile]

	PUSH	0
	PUSH	N_WROTE
	PUSH	[N_READ]
	PUSH	READ_BUF
	PUSH	[HDL_STDOUT]
	call	[IAT_WriteFile]

	MOV	EAX,[N_READ]

	RET


CREATE_NEW          EQU 1
CREATE_ALWAYS       EQU 2
OPEN_EXISTING       EQU 3
OPEN_ALWAYS         EQU 4
TRUNCATE_EXISTING   EQU 5

GENERIC_READ	EQU	80000000h
GENERIC_WRITE	EQU	40000000h
FILE_ATTRIBUTE_NORMAL EQU	00000080h

TEST3:
	PUSH	0		;templateFile
	PUSH	FILE_ATTRIBUTE_NORMAL
	PUSH	CREATE_ALWAYS	;CREATE_NEW
	PUSH	0		;securityAttribute
	PUSH	0		;shareMode
	PUSH	GENERIC_WRITE
	PUSH	FILENAME_TEST1
	CALL	[IAT_CreateFileA]
	MOV	[HDL_OUTFILE],EAX

	push	0
	push	N_WROTE	;0
	push	0eh
	push	STR_HELLO
	push	EAX
	CALL	[IAT_WriteFile]


	PUSH	[HDL_OUTFILE]
	CALL	[IAT_CloseHandle]

	RET


TEST4:
	CALL	[IAT_GetCommandLineA]
	MOV	[CMDLINE],EAX

	MOV	ESI,EAX
	CALL	_PUTSTR

	RET

TEST5:
	MOV	EBX,[IAT_ExitProcess]

	;CLI
	XOR	EAX,EAX
	MOV	AX,CS
	MOV	DS,AX
	MOV	ES,AX
	;MOV	SS,AX
	;MOV	ESP,_TEXT_FILL-4
	;STI

	PUSH	100
	PUSH	EBX
	RET

	MOV	EAX,100
	PUSH	EAX
	CALL	[IAT_ExitProcess]

	RET

TEST6:
	CALL	[IAT_GetCommandLineA]
	MOV	[CMDLINE],EAX

	MOV	ESI,EAX
	CALL	_PUTSTR

	MOV	EAX,[_DATA_FILL]


	MOV	EAX,[_TEXT]

	MOV	[_TEXT],EAX	;exception

	MOV	ESI,[CMDLINE]
	CALL	_PUTSTR

	RET

TEST_HELLO:
	MOV	ESI,STR_HELLO
	CALL	_PUTSTR
	RET


_PUTCRLF:
	MOV	AL,0Dh
	CALL	_PUTCHR
	MOV	AL,0AH
	CALL	_PUTCHR
	RET

;
_PUTSTR:
	MOV	AL,[ESI]
	OR	AL,AL
	JE	_PUTSTR.R

	CALL	_PUTCHR

	INC	ESI
	JMP	_PUTSTR

_PUTSTR.R:
	RET

_PUTCHR:
	PUSHAD

	MOV	[PUTCHR_BUF],AL

	PUSH	0
	MOV	EAX,ESP

	push	0
	push	EAX	;push	N_WROTE	;0
	push	01h
	push	PUTCHR_BUF
	push	[HDL_STDOUT]
	CALL	[IAT_WriteFile]

	POP	EAX

	POPAD
	RET

GMEM_FIXED	EQU	00000000H
GMEM_ZEROINIT	EQU	00000040H

;	EAX<size
;	>EAX memory address

__ALLOC:
	MOV	EBX,GMEM_FIXED+GMEM_ZEROINIT
	PUSH	EAX
	PUSH	EBX
	CALL	[IAT_GlobalAlloc]

	OR	EAX,EAX
	JE	ERR_ALLOC

	RET

;	EAX<memory address

__FREE:
	PUSH	EAX
	CALL	[IAT_GlobalFree]

	RET

;################


VRAM_ADRS	EQU	0

READ_BYTES	EQU	400H
WRITE_BYTES	EQU	400H

	;;ORG	0

DIS386_MAIN:
;	mov	ax,cs
;	mov	es,ax
;	mov	ax,4a00h
;	mov	bx,1000h
;	int	21h
;	jb	err_alloc

;	mov	ax,4800h
;	mov	bx,1000h
;	int	21h
;	jb	err_alloc

	;	MOV	AX,104H
	;mov	[vram_seg],ax

	jmp	alloc.e

;err_alloc:
;	mov	ah,4ch
;	CALL	INT21_exit	;int	21h

alloc.e:
;	mov	ax,cs
;	mov	ds,ax
;	mov	es,ax
	cld

	CALL	GETCLINE

	MOV	ESI,CLINE+1	;0082H
	MOV	EDI,FILE1
	CALL	STRCPY_F

;	MOV	SI,
;	MOV	DI,FILE2
;	CALL	STRCPY

	mov	Esi,CLINE+1	;0082h
	mov	Edi,file2
	call	strcpy_F

	mov	Esi,file2
ext:	lodsb
	or	al,al
	je	ext.10
	cmp	al,'.'
	je	ext.10
	jmp	ext

ext.10:
	mov	[ext_pnt],Esi
	dec	Esi
	mov	byte [Esi],0

	mov	Esi,file2
	mov	Edi,str_001
	call	strcat

	MOV	EBX,0000H
	MOV	[OFFSET],EBX

	MOV	EBX,0F000H	;6000H
	MOV	[CUT_SIZE],EBX


	MOV	EDX,CLINE+1	;0081H

OPTION:
;	MOV	AL,[DX]
	xchg	Ebx,Edx
	mov	al,[Ebx]
	xchg	Ebx,Edx

	INC	EDX
	OR	AL,AL
	JE	OPTION_END
	CMP	AL,'/'
	JNE	OPTION

;	MOV	AL,[DX]
	xchg	Ebx,Edx
	mov	al,[Ebx]
	xchg	Ebx,Edx

	CALL	UPPER
	INC	EDX
	CMP	AL,'A'
	JE	OPT.10
	CMP	AL,'C'
	JE	OPT.20
	CMP	AL,'3'
	JE	OPT.30
	CMP	AL,'P'
	JE	OPT.40
	CMP	AL,'L'
	JE	OPT.50
	CMP	AL,'M'
	JE	OPT.60
	JMP	OPTION

OPT.10:	CALL	GETHEX
	MOV	[OFFSET],EBX
	JMP	OPTION

OPT.20:
	CALL	GETHEX
	MOV	[CUT_SIZE],BX
	JMP	OPTION

OPT.30:
	MOV	AL,0FFH
	MOV	[FF386],AL
	MOV	[F386],AL
	MOV	[FFDWORD],AL
	MOV	[FDWORD],AL
	JMP	OPTION

OPT.40:
	MOV	AL,0FFH
	MOV	[NO_PASS1],AL
	JMP	OPTION

OPT.50:
	MOV	AL,0FFH
	MOV	[FLG.L],AL
	JMP	OPTION

OPT.60:
	MOV	AL,0FFH
	MOV	[FLG.M],AL
	JMP	OPTION


OPTION_END:
	CMP	BYTE [FLG.M],0
	JNE	MON

	MOV	ah,09H
	MOV	EDX,MES_CSROFF
	CALL	DOS09	;int	21h

	MOV	AX,3D00H	;open
	MOV	EDX,FILE1
	MOV	CX,0
	CALL	INT21_open	;INT	21H
	JB	ERR_OPEN
	MOV	[HDL1],EAX


	MOV	AX,4202H
	MOV	EBX,[HDL1]
	MOV	CX,0
	MOV	DX,0
	CALL	INT21_seek	;INT	21H

	MOV	AX,4201H
	MOV	EBX,[HDL1]
	MOV	CX,0
	MOV	DX,0
	CALL	INT21_seek	;INT	21H

	SHL	EDX,10H
	MOV	DX,AX
	MOV	[FILE1_SIZE],EDX

	MOV	EAX,EDX
	CALL	CON_PUTHEX4

	MOV	AX,4200H
	MOV	EBX,[HDL1]
	MOV	CX,0
	MOV	DX,0
	CALL	INT21_seek	;INT	21H


MAKE:
	MOV	AX,3C00H	;create
	MOV	EDX,FILE2
	MOV	CX,0
	CALL	INT21_create	;INT	21H
	JB	ERR_MAKE
	MOV	[HDL2],EAX

	CALL	INIT_MEMORY

	CALL	FILL

	MOV	AL,[NO_PASS1]
	INC	AL
	JE	MAKE.10

	MOV	AL,1
	MOV	[PASS],AL

	CALL	PASS_MAIN
MAKE.10:
	MOV	AL,2
	MOV	[PASS],AL

	CALL	PASS_MAIN

	MOV	ECX,[W_LEFT]
	OR	ECX,ECX
	JE	PROG_END.10

	MOV	AX,4000H	;write
	MOV	EBX,[HDL2]
	MOV	EDX,W_WORK
	CALL	INT21_write	;INT	21H

PROG_END.10:
	MOV	AX,3E00H	;close
	MOV	EBX,[HDL2]
	CALL	INT21_close	;INT	21H

	MOV	AX,4C00H
	CALL	INT21_exit	;INT	21H
;
;
;
MON:
	MOV	AX,3D00H	;open
	MOV	EDX,FILE1
	MOV	CX,0
	CALL	INT21_open	;INT	21H
	JB	ERR_OPEN
	MOV	[HDL1],EAX

	MOV	AX,3F00H	;read
	MOV	EBX,[HDL1]
	MOV	ECX,090000H
	MOV	EDX,[FILE1_CONTENTS_MEMORY]	;WORK
	CALL	INT21_read	;INT	21H

MON_INPUT:
	MOV	AH,9
	MOV	EDX,MON_PROMPT
	CALL	DOS09	;INT	21H

	MOV	AH,0AH
	MOV	EDX,INPUT_WORK
	MOV	BYTE [EDX],70
	PUSH	EDX
	CALL	DOS0A	;INT	21H
	POP	EDX
	INC	EDX
	MOVZX	EAX,BYTE [EDX]
	INC	EDX
	ADD	EAX,EDX
	MOV	BYTE [EAX],0

	MOV	AH,2
	MOV	DL,0DH
	CALL	_PUTCHR	;INT	21H
	MOV	AH,2
	MOV	DL,0AH
	CALL	_PUTCHR	;INT	21H

	MOV	ESI,INPUT_WORK+2
	CLD
	LODSB
	CALL	UPPER
	CMP	AL,'U'
	JE	MONU
	JMP	MON_INPUT


MONU:
	MOV	AL,[ESI]
	CMP	AL,20H

	MOV	EAX,[ADR]
	MOV	EBX,-1
	JBE	MONU.10

	MOV	EDX,ESI
	CALL	GETHEX
	MOV	EAX,EBX
	MOV	EBX,-1
	;MOV	EAX,0
	CMP	BYTE [EDX],0
	JE	MONU.10

	PUSH	EAX
	INC	EDX
	CALL	GETHEX
		INC	EBX
	POP	EAX

MONU.10:

	MOV	[MON_ADRS],EAX
	MOV	[TOP_ADR],EAX
	MOV	[ADR],EAX

	;ADD	EAX,100H
		MOV	EAX,EBX
	MOV	[END_ADR],EAX

	MOV	EAX,[ADR]
	ADD	EAX,[FILE1_CONTENTS_MEMORY]	;WORK
	SUB	EAX,[OFFSET]
	MOV	[PNT],EAX

	PUSH	EBX
	CALL	CLEAR_WORK
	POP	EBX

;	MOV	AL,'_'
;	CALL	PUTCHR
;	CALL	PUTHEX
;	;CALL	PUT_LBL_H
;	MOV	AL,':'
;	CALL	PUTCHR

	MOV	DWORD [MON_LINE],0
	MOV	DWORD [MON_LINECNT],20
	OR	EBX,EBX
	JS	MONU.50

	MOV	DWORD [MON_LINECNT],100

MONU.50:
	MOV	BYTE [NO_PASS1],0FFH

	MOV	EBX,[ADR]
	CALL	MAIN.05

	JMP	MON_INPUT

MON_PROMPT:
	DB	0DH,0AH
	DB	'MON>$'

;
;
;

PASS_MAIN:
	XOR	AL,AL
	MOV	[R_FLG],AL
	MOV	EBX,0000H
	MOV	[R_LEFT],EBX

	MOV	EBX,W_WORK
	MOV	[W_PNT],EBX
	MOV	EBX,0000H
	MOV	[W_LEFT],EBX

	MOV	EBX,0
	MOV	[FILE_SIZE_CNT],EBX

	MOV	AX,4200H
	MOV	EBX,[HDL1]
	MOV	CX,0
	MOV	DX,0
	CALL	INT21_seek	;INT	21H

	MOV	AX,3F00H	;read
	MOV	EBX,[HDL1]
	MOV	ECX,0C000H	;8000H
	MOV	EDX,[FILE1_CONTENTS_MEMORY]	;WORK
	CALL	INT21_read	;INT	21H
	PUSH	EAX

	MOV	EBX,[OFFSET]
	MOV	[TOP_ADR],EBX
	MOV	[ADR],EBX

	MOV	AX,4202H
	mov	ebx,[hdl1]
	MOV	CX,0
	MOV	DX,0
	CALL	INT21_seek	;INT	21H

	MOV	AX,4201H
	MOV	EBX,[HDL1]
	MOV	CX,0
	MOV	DX,0
	CALL	INT21_seek	;INT	21H
	POP	EAX

	;MOV	BX,DX
	;SHL	EBX,10H
	;MOV	BX,AX		;size
	MOV	EBX,EAX

;	PUSHA
;	CALL	PUTHEX_A2
;	POPA

	;XOR	EDX,EDX
	MOV	EDX,[ADR]
	ADD	EBX,EDX
	DEC	EBX
	MOV	[END_ADR],EBX	;END_ADR = OFFSET + FILE_SIZE - 1

	MOV	EBX,[FILE1_CONTENTS_MEMORY]	;WORK
	MOV	[PNT],EBX

	MOV	EDX,[TOP_ADR]
	CALL	SET_LABEL

MAIN:
	CMP	BYTE [FLG.M],0
	JE	MAIN.NOTMON

	MOV	EAX,[MON_LINE]
	INC	DWORD [MON_LINE]
	CMP	EAX,[MON_LINECNT]
	JB	MAIN.NOTMON
	RET

MAIN.NOTMON:
	CALL	CLEAR_WORK

	MOV	EBX,[ADR]
	MOV	AL,[NO_PASS1]
	INC	AL
	JE	MAIN.05

	CALL	SEARCH_LABEL
	JB	MAIN.15
MAIN.05:
	MOV	AL,'_'
	CALL	PUTCHR
		MOV	EAX,EBX
		SHR	EAX,16
		;AND	AL,0FH
		;JE	MAIN.051
		;CALL	PUTHEX_A.1

		AND	AL,0FFH
		JE	MAIN.051
		CALL	PUTHEX_A
MAIN.051:
	CALL	PUTHEX
	;CALL	PUT_LBL_H
	MOV	AL,':'
	CALL	PUTCHR

MAIN.15:
	MOV	EBX,MAIN_N
	PUSH	EBX

;	MOV	AL,0DH
;	CALL	CON_PUTCHR
;	MOV	AL,0AH
;	CALL	CON_PUTCHR

	CALL	TAB2

	CALL	BYTE_1		;default = 1 byte

	MOV	ESI,[PNT]

	MOV	AL,[ESI+0]
	INC	ESI		;default = code+1

	MOV	[CODE],AL

	CMP	BYTE [FF386],0FFH
	JE	C_ALIGN.E

;	for ALIGNED CODE

	CMP	AL,00H
	JNE	C_ALIGN.E
	CMP	BYTE [ESI],55H	;PUSH BP
	JNE	C_ALIGN.E

	PUSHAD
	MOV	EBX,[ADR]
	INC	EBX
	CALL	CHECK_L
	POPAD
	JMP	UNDEF		;make DB 00

C_ALIGN.E:


	CMP	BYTE [PASS],1
	JNE	MAIN.16

	CMP	AL,0C3H		;ret
	JE	MA
	CMP	AL,0CBH		;retf
	JE	MA


	JMP	MAIN.16

MA:
	PUSHAD
	MOV	EBX,[ADR]
	INC	EBX
	CALL	CHECK_L
	POPAD


MAIN.16:
	MOV	EDI,TBL2
MAIN.17:
	MOV	AL,[EDI]	;table size

;	PUSH	AX
;	CALL	CON_PUTHEX
;	MOV	AL,' '
;	CALL	CON_PUTCHR
;	POP	AX

	OR	AL,AL
	JE	UNDEF

	;MOV	BX,[EDI+1]
	;MOVZX	EBX,BX
	MOV	EBX,[EDI+1]
	PUSH	EBX		;func
	INC	EDI
	INC	EDI
	INC	EDI

	INC	EDI
	INC	EDI
MAIN.18:
	PUSH	EAX
	MOV	BH,[ESI-1]
	MOV	BL,[ESI+0]

	MOV	DH,[EDI+00H]
	MOV	DL,[EDI+01H]

	MOV	CH,[EDI+02H]
	MOV	CL,[EDI+03H]
	CALL	CHECK2
	JE	MAIN.20

	INC	EDI
	INC	EDI
	INC	EDI
	INC	EDI
	POP	EAX
	DEC	AL
	JNE	MAIN.18

	POP	EBX

	OR	AL,AL
	JE	MAIN.17
	MOV	EDX,4
MAIN.19:
	ADD	EDI,EDX
	DEC	AL
	JNE	MAIN.19
	JMP	MAIN.17

MAIN.20:
	POP	EAX
	RET

;
;
;

CHECK2:
	MOV	AL,BH
	AND	al,CH
	CMP	AL,DH
	jne	__ret

	MOV	AL,BL
	AND	al,CL
	CMP	AL,DL
	RET


;
;
;

_AAA:	MOV	AL,@AAA
	CALL	PUTSTR
	RET

;
;
;

_ADC:
	CALL	INC_BYTE
	MOV	AL,@ADC
	CALL	PUTSTR
	CALL	TAB

	MOV	AL,DH
	CMP	AL,00010000B
	JE	_ADC.10
	CMP	AL,00010010B
	JE	_ADC.20
	CMP	AL,10000000B
	JE	_ADC.30
	CMP	AL,00010100B
	JE	_ADC.40

_ADC.10:CALL	REG2
	CALL	COMMA
	CALL	REG1
	RET

_ADC.20:CALL	REG1
	CALL	COMMA
	CALL	REG2
	RET

_ADC.30:
	CMP	BL,0C0H
	JNB	_ADC.31
	CALL	BYTE_WORD	;#
_ADC.31:
	CALL	REG2
	CALL	COMMA
	CALL	S_IMM
	RET

_ADC.40:
	CALL	BYTE_1
	CALL	ACC
	CALL	COMMA
	CALL	IMM
	RET

;
;
;

_ADD:
	CALL	INC_BYTE
	MOV	AL,@ADD
	CALL	PUTSTR
	CALL	TAB

	MOV	AL,DH
	CMP	AL,00000000B
	JE	_ADD.10
	CMP	AL,00000010B
	JE	_ADD.20
	CMP	AL,10000000B
	JE	_ADD.30
	CMP	AL,00000100B
	JE	_ADD.40

_ADD.10:CALL	REG2
	CALL	COMMA
	CALL	REG1
	RET

_ADD.20:CALL	REG1
	CALL	COMMA
	CALL	REG2
	RET

_ADD.30:
	CMP	BL,0C0H
	JNB	_ADD.31
	CALL	BYTE_WORD	;#
_ADD.31:
	CALL	REG2
	CALL	COMMA
	CALL	S_IMM
	RET

_ADD.40:CALL	BYTE_1
	CALL	ACC
	CALL	COMMA
	CALL	IMM
	RET


_DAA:	MOV	AL,@DAA
	CALL	PUTSTR
	RET


_INC:	MOV	AL,@INC
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,DH
	CMP	AL,0FEH
	JE	_INC.10
	CMP	AL,01000000B
	JE	_INC.20

_INC.10:
	MOV	AL,BL
	CMP	AL,11000000B
	JB	_INC.15
	CALL	REG2
	CALL	INC_BYTE
	RET

_INC.15:
	CALL	BYTE_WORD
	CALL	REG2
	CALL	INC_BYTE
	RET

_INC.20:
	MOV	AL,BH
	AND	AL,07H
	OR	AL,08H
	CALL	REG
	RET


_AAS:	MOV	AL,@AAS
	CALL	PUTSTR
	RET

_CMP:	CALL	INC_BYTE
	MOV	AL,@CMP
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,DH
	CMP	AL,00111000B
	JE	_CMP.10
	CMP	AL,00111010B
	JE	_CMP.20
	CMP	AL,10000000B
	JE	_CMP.30
	CMP	AL,00111100B
	JE	_CMP.40

_CMP.10:
	CALL	REG2
	CALL	COMMA
	CALL	REG1
	RET

_CMP.20:
	CALL	REG1
	CALL	COMMA
	CALL	REG2
	RET

_CMP.30:
	CMP	BL,0C0H
	JNB	_CMP.31
	CALL	BYTE_WORD	;#
_CMP.31:
	CALL	REG2
	CALL	COMMA
	CALL	S_IMM
	RET

_CMP.40:
	CALL	BYTE_1
	CALL	ACC
	CALL	COMMA
	CALL	IMM
	RET


_DAS:	MOV	AL,@DAS
	CALL	PUTSTR
	RET

_DEC:	MOV	AL,@DEC
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,DH
	CMP	AL,0FEH
	JE	_DEC.10
	CMP	AL,01001000B
	JE	_DEC.20

_DEC.10:
	MOV	AL,BL
	CMP	AL,11000000B
	JB	_DEC.15
	CALL	REG2
	CALL	INC_BYTE
	RET

_DEC.15:
	CALL	BYTE_WORD
	CALL	REG2
	CALL	INC_BYTE
	RET

_DEC.20:
	MOV	AL,BH
	AND	AL,07H
	OR	AL,08H
	CALL	REG
	CALL	BYTE_1
	RET


_NEG:	CALL	INC_BYTE
	MOV	AL,@NEG
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,DH
	CMP	AL,11110110B
	JE	_NEG.10
	CMP	AL,11111110B
	JE	_NEG.20

_NEG.10:
	MOV	AL,BL
	CMP	AL,11000000B
	JB	_NEG.15
	CALL	REG2
	RET

_NEG.15:
	CALL	BYTE_WORD
	CALL	REG2
	RET

_NEG.20:
	CALL	REG2
	RET


_SBB:	CALL	INC_BYTE
	MOV	AL,@SBB
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,DH
	CMP	AL,00011000B
	JE	_SBB.10
	CMP	AL,00011010B
	JE	_SBB.20
	CMP	AL,10000000B
	JE	_SBB.30
	CMP	AL,00011100B
	JE	_SBB.40

_SBB.10:
	CALL	REG2
	CALL	COMMA
	CALL	REG1
	RET

_SBB.20:
	CALL	REG1
	CALL	COMMA
	CALL	REG2
	RET

_SBB.30:
	CMP	BL,0C0H
	JNB	_SBB.31
	CALL	BYTE_WORD	;#
_SBB.31:
	CALL	REG2
	CALL	COMMA
	CALL	S_IMM
	RET

_SBB.40:
	CALL	BYTE_1
	CALL	ACC
	CALL	COMMA
	CALL	IMM
	RET


_SUB:	CALL	INC_BYTE
	MOV	AL,@SUB
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,DH
	CMP	AL,00101000B
	JE	_SUB.10
	CMP	AL,00101010B
	JE	_SUB.20
	CMP	AL,10000000B
	JE	_SUB.30
	CMP	AL,00101100B
	JE	_SUB.40

_SUB.10:
	CALL	REG2
	CALL	COMMA
	CALL	REG1
	RET

_SUB.20:
	CALL	REG1
	CALL	COMMA
	CALL	REG2
	RET

_SUB.30:
	CMP	BL,0C0H
	JNB	_SUB.31
	CALL	BYTE_WORD	;#
_SUB.31:
	CALL	REG2
	CALL	COMMA
	CALL	S_IMM
	RET

_SUB.40:
	CALL	BYTE_1
	CALL	ACC
	CALL	COMMA
	CALL	IMM
	RET


_AAM:	MOV	AL,@AAM
	CALL	PUTSTR
	CALL	INC_BYTE
	RET

;
_ARPL:
	CALL	INC_BYTE
	MOV	AL,@ARPL
	CALL	PUTSTR
	CALL	TAB
	CALL	REG1
	CALL	COMMA
	CALL	REG2
	RET


_MOVSX:
	MOV	AL,@MOV
	CALL	PUTSTR
	MOV	AL,'S'
	CALL	PUTCHR
	JMP	_MOV2

_MOVZX:
	MOV	AL,@MOV
	CALL	PUTSTR
	MOV	AL,'Z'
	CALL	PUTCHR
	JMP	_MOV2

_MOV2:
;	MOV	AL,@MOV
;	CALL	PUTSTR
	MOV	AL,'X'
	CALL	PUTCHR

	CALL	TAB
	MOV	AH,[ESI+0]
	PUSH	EAX		;<- PUSH AF
	INC	ESI
	CALL	INC_BYTE
	MOV	AL,[ESI+0]
	MOV	BH,AL
	AND	AL,0C0H
	CMP	AL,0C0H
	JE	_MOV2.10

	PUSH	EAX
	MOV	AL,BH
	ror al,1
	ror al,1
	ror al,1
	AND	AL,07H
	ADD	AL,8
	CALL	REG
	CALL	COMMA
	POP	EAX
	POP	EBX

	MOV	AH,[FDWORD]
	PUSH	EAX
	MOV	BYTE [FDWORD],0
	CALL	BYTE_WORD
	POP	EAX
	MOV	[FDWORD],AH

	MOV	BL,[ESI+0]
	CALL	REG2
	CALL	INC_BYTE
	RET

_MOV2.10:
	MOV	AL,BH
	PUSH	EAX
	ror al,1
	ror al,1
	ror al,1
	AND	AL,07H
	ADD	AL,8
	CALL	REG
	CALL	COMMA
	POP	EAX
	AND	AL,07H
	POP	ECX
;	BIT	0,CH
	test	ch,1
	JNE	_MOV2.20
	CALL	REG
	CALL	INC_BYTE
	RET
_MOV2.20:
	MOV	CH,AL
	MOV	AL,[FDWORD]
	PUSH	EAX
	XOR	AL,AL
	MOV	[FDWORD],AL
	MOV	AL,CH

	ADD	AL,8
	CALL	REG
	POP	EAX
	MOV	[FDWORD],AL

	CALL	INC_BYTE
	RET

_IMULIB:
	MOV	AL,@IMUL
	CALL	PUTSTR
	CALL	TAB
	CALL	INC_BYTE
	CALL	INC_BYTE
	MOV	BL,[ESI]
	MOV	AL,BL
	SHR	AL,3
	AND	AL,7
	OR	AL,8
	CALL	REG
	CALL	COMMA
	CALL	REG2
	CALL	COMMA
	MOV	AL,[ESI]
	CALL	PUTHEX_A2
	RET


_IMULIW:
	MOV	AL,@IMUL
	CALL	PUTSTR
	CALL	TAB
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	MOV	BL,[ESI]
	MOV	AL,BL
	SHR	AL,3
	AND	AL,7
	OR	AL,8
	PUSH	EBX
	CALL	REG
	CALL	COMMA
	POP	EBX
	CALL	REG2
	CALL	COMMA
	CALL	ISDWORD
	JE	_IMULIW.10
	MOV	BX,[ESI]
	CALL	PUTINT
	RET
_IMULIW.10:
	;MOV	BX,[SI]
	;MOV	DX,[SI+2]
	MOV	EBX,[ESI]

	CALL	PUTDINT
	CALL	INC_BYTE
	CALL	INC_BYTE
	RET


_IMUL2:
	MOV	AL,@IMUL
	CALL	PUTSTR
	CALL	TAB
	INC	ESI
	CALL	INC_BYTE
	MOV	AL,[ESI+0]
	MOV	BH,AL
	AND	al,0C0H
	CMP	al,0C0H
	JE	_IMUL2.10

	PUSH	EBX
	PUSH	EAX
	MOV	AL,BH
	ror al,1
	ror al,1
	ror al,1
	AND	al,07H
	ADD	AL,8
	CALL	REG
	CALL	COMMA
	POP	EAX
	POP	EBX
	CALL	BYTE_WORD

	MOV	BL,[ESI+0]
	CALL	REG2
	CALL	INC_BYTE
	RET

	JMP	UNDEF

	CALL	REG1
	CALL	COMMA
	CALL	REG2
	CALL	INC_BYTE
	RET

_IMUL2.10:
	MOV	AL,BH
	PUSH	EAX
	ror al,1
	ror al,1
	ror al,1
	AND	al,07H
	ADD	AL,8
	CALL	REG
	CALL	COMMA
	POP	EAX
	AND	al,07H
	ADD	AL,8
	CALL	REG
	CALL	INC_BYTE
	RET



_IMUL:	MOV	AL,@IMUL
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,BL
	CMP	al,11000000B
	JB	_IMUL.10
	CALL	REG2
	CALL	INC_BYTE
	RET

_IMUL.10:
	CALL	BYTE_WORD
	CALL	REG2
	CALL	INC_BYTE
	RET


_MUL:	MOV	AL,@MUL
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,BL
	CMP	al,11000000B
;	CALL	CL,BYTE_WORD
	jnb	_mul.nc
	call	byte_word
_mul.nc:
	CALL	REG2
	CALL	INC_BYTE
	RET

_AAD:	MOV	AL,@AAD
	CALL	PUTSTR
	CALL	INC_BYTE
	RET

_CBW:	CALL	ISDWORD
	JE	_CWDE
	MOV	AL,@CBW
	CALL	PUTSTR
	RET
_CWDE:
	MOV	AL,@CWDE
	CALL	PUTSTR
	RET

_CWD:	CALL	ISDWORD
	JE	_CDQ
	MOV	AL,@CWD
	CALL	PUTSTR
	RET

_CDQ:
	MOV	AL,@CDQ
	CALL	PUTSTR
	RET




_IDIV:	MOV	AL,@IDIV
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,BL
	CMP	al,11000000B
;	CALL	CL,BYTE_WORD
	jnb	_idiv.nc
	call	byte_word
_idiv.nc:
	CALL	REG2
	CALL	INC_BYTE
	RET


_DIV:	MOV	AL,@DIV
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,BL
	CMP	al,11000000B
;	CALL	CL,BYTE_WORD
	jnb	_div.nc
	call	byte_word
_div.nc:
	CALL	REG2
	CALL	INC_BYTE
	RET


_IN:	MOV	AL,@IN
	CALL	PUTSTR
	CALL	TAB
	CALL	ACC
	CALL	COMMA
	MOV	AL,DH
	CMP	al,11100100B
	JNE	_IN.10
	MOV	AL,[ESI+00H]
	CALL	PUTHEX_A2
	CALL	INC_BYTE
	RET

_IN.10:	MOV	AL,@DX
	CALL	PUTSTR
	RET


_LAHF:	MOV	AL,@LAHF
	CALL	PUTSTR
	RET

_LFS:	MOV	AL,@FS
	JMP	_LSS.0

_LGS:	MOV	AL,@GS
	JMP	_LSS.0

_LSS:	MOV	AL,@SS

_LSS.0:	PUSH	EAX
	MOV	AL,'L'
	CALL	PUTCHR
	POP	EAX
	CALL	PUTSTR
	CALL	TAB
	CALL	INC_BYTE
	CALL	INC_BYTE
	INC	ESI
	MOV	BL,[ESI]
	MOV	AL,BL
	SHR	AL,3
	AND	AL,7
	OR	AL,8
	CALL	REG
	CALL	COMMA
	CALL	REG2
	RET


_LDS:	MOV	AL,@LDS
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,BL
	ror al,1
	ror al,1
	ror al,1
	AND	al,07H
	OR	al,08H
	CALL	REG
	CALL	COMMA
	CALL	REG2
	CALL	INC_BYTE
	RET

_LEA:	MOV	AL,@LEA
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,BL
	ror al,1
	ror al,1
	ror al,1
	AND	al,07H
	OR	al,08H
	CALL	REG
	CALL	COMMA
	CALL	REG2
	CALL	INC_BYTE
	RET

_LES:	MOV	AL,@LES
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,BL
	ror al,1
	ror al,1
	ror al,1
	AND	al,07H
	OR	al,08H
	CALL	REG
	CALL	COMMA
	CALL	REG2
	CALL	INC_BYTE
	RET

_0F90:
;	MOV	AL,[SI+2]
;	SHR	AL,3
;	CMP	AL,2
;	JNE	UNDEF

	CALL	INC_BYTE
	CALL	INC_BYTE
	MOV	BL,[ESI+0]
	PUSH	EBX
	MOV	AL,'S'
	CALL	PUTCHR
	MOV	AL,'E'
	CALL	PUTCHR
	MOV	AL,'T'
	CALL	PUTCHR
	POP	EBX
	PUSH	EBX
	CALL	PUTCOND
	CALL	TAB
	POP	EBX
	INC	ESI
	MOV	BL,[ESI+0]
		MOV	BH,0
	CALL	REG2
	RET

PUTCOND:
	PUSH	EBX
	MOVZX	EBX,BL
	AND	BL,0FH
	SHL	BX,1
	ADD	EBX,STR_COND
	MOV	AL,[EBX]
	CALL	PUTCHR
	INC	EBX
	MOV	AL,[EBX]
	CALL	PUTCHR
	POP	EBX
	RET

STR_COND:
	DB	'O '	;0
	DB	'NO'
	DB	'B '
	DB	'NB'
	DB	'E '	;4
	DB	'NE'
	DB	'BE'
	DB	'A '
	DB	'S '	;8
	DB	'NS'
	DB	'P '
	DB	'NP'
	DB	'L '	;C
	DB	'GE'
	DB	'LE'
	DB	'G '

_0F03:
	MOV	AL,'L'
	CALL	PUTCHR
	MOV	AL,'S'
	CALL	PUTCHR
	MOV	AL,'L'
	CALL	PUTCHR
	CALL	TAB
	CALL	INC_BYTE
	CALL	INC_BYTE
	INC	ESI
	MOV	BL,[ESI+0]
	MOV	AL,BL
	SHR	AL,3
	AND	AL,7
	OR	AL,8
	CALL	REG
	CALL	COMMA
	CALL	REG2
	RET


_0F00:
	CALL	INC_BYTE
	CALL	INC_BYTE
	INC	ESI
	MOV	BL,[ESI+0]
	MOV	AL,BL
	SHR	AL,3
	AND	AL,7
	CMP	AL,0
	JE	_SLDT
	CMP	AL,1
	JE	_STR
	CMP	AL,2
	JE	_LLDT
	CMP	AL,3
	JE	_LTR
	JMP	UNDEF

_STR:
	PUSH	EBX
	MOV	AL,'S'
	CALL	PUTCHR
_STR.10:
	MOV	AL,'T'
	CALL	PUTCHR
	MOV	AL,'R'
	CALL	PUTCHR
	CALL	TAB
	POP	EBX
	CALL	REG2
	RET

_LTR:
	PUSH	EBX
	MOV	AL,'L'
	CALL	PUTCHR
	JMP	_STR.10

;
;
;

_0F01:
	CALL	INC_BYTE
	CALL	INC_BYTE
	INC	ESI
	MOV	BL,[ESI+0]
	MOV	AL,BL
	SHR	AL,3
	AND	AL,7
	CMP	AL,0
	JE	_SGDT
	CMP	AL,1
	JE	_SIDT
	CMP	AL,2
	JE	_LGDT
	CMP	AL,3
	JE	_LIDT
	CMP	AL,4
	JE	_SMSW
	CMP	AL,6
	JE	_LMSW
	JMP	UNDEF

_SGDT:
	PUSH	EBX
	MOV	AL,'S'
	CALL	PUTCHR
	MOV	AL,@GDT
	JMP	_LGDT.10

_SIDT:
	PUSH	EBX
	MOV	AL,'S'
	CALL	PUTCHR
	MOV	AL,@IDT
	JMP	_LGDT.10

_SLDT:
	PUSH	EBX
	MOV	AL,'S'
	CALL	PUTCHR
	MOV	AL,@LDT
	JMP	_LGDT.10

_LLDT:
	PUSH	EBX
	MOV	AL,'L'
	CALL	PUTCHR
	MOV	AL,@LDT
	JMP	_LGDT.10

_LGDT:
	PUSH	EBX
	MOV	AL,'L'
	CALL	PUTCHR
	MOV	AL,@GDT
_LGDT.10:
	CALL	PUTSTR
	CALL	TAB
	POP	EBX
	CALL	REG2
	RET

_LIDT:
	PUSH	EBX
	MOV	AL,'L'
	CALL	PUTCHR
	MOV	AL,@IDT
	JMP	_LGDT.10

_SMSW:
	PUSH	EBX
	MOV	AL,'S'
	CALL	PUTCHR
	MOV	AL,@MSW
	CALL	PUTSTR
	CALL	TAB
	POP	EBX
	CALL	REG2
	RET

_LMSW:
	PUSH	EBX
	MOV	AL,'L'
	CALL	PUTCHR
	MOV	AL,@MSW
	CALL	PUTSTR
	CALL	TAB
	POP	EBX
	CALL	REG2
	RET

_MOVTR:
	MOV	AL,@TR
	JMP	_MOVCR.0

_MOVDR:
	MOV	AL,@DR
	JMP	_MOVCR.0

_MOVCR:	MOV	AL,@CR
	JMP	_MOVCR.0


_MOVCR.0:
	MOV	[_MOVCR.0.STR],AL

	CALL	INC_BYTE
	CALL	INC_BYTE
	INC	ESI
	MOV	AL,@MOV
	CALL	PUTSTR
	CALL	TAB
	MOV	BL,[ESI+0]
	PUSH	EBX
	CALL	REG2
	CALL	COMMA
	MOV	AL,[_MOVCR.0.STR]	;@CR
	CALL	PUTSTR
	POP	EBX
	MOV	AL,BL
	SHR	AL,3
	AND	AL,7
	ADD	AL,'0'
	CALL	PUTCHR
	RET


_MOVTR2:MOV	AL,@TR
	JMP	_MOVCR2.0

_MOVDR2:MOV	AL,@DR
	JMP	_MOVCR2.0

_MOVCR2:MOV	AL,@CR
	JMP	_MOVCR2.0


_MOVCR2.0:
	MOV	[_MOVCR2.0.STR],AL
	CALL	INC_BYTE
	CALL	INC_BYTE
	MOV	AL,@MOV
	CALL	PUTSTR
	CALL	TAB
	INC	ESI
	MOV	BL,[ESI+0]
	PUSH	EBX
	MOV	AL,[_MOVCR2.0.STR]	;@CR
	CALL	PUTSTR
	POP	EBX
	PUSH	EBX
	MOV	AL,BL
	SHR	AL,3
	AND	AL,7
	ADD	AL,'0'
	CALL	PUTCHR
	CALL	COMMA
	POP	EBX
	CALL	REG2
	RET

_MOV:	CALL	INC_BYTE

	MOV	AL,@MOV		;#
	CALL	PUTSTR
	CALL	TAB

	MOV	AL,DH
	CMP	al,10001000B
	JE	_MOV.10
	CMP	al,10001010B
	JE	_MOV.20
	CMP	al,11000110B
	JE	_MOV.30
	CMP	al,10110000B
	JE	_MOV.40
	CMP	al,10100000B
	JE	_MOV.50
	CMP	al,10100010B
	JE	_MOV.60
	CMP	al,8EH
	JE	_MOV.70
	CMP	al,8CH
	JE	_MOV.80

_MOV.10:
	CALL	REG2
	CALL	COMMA
	CALL	REG1
	RET

_MOV.20:
	CALL	REG1
	CALL	COMMA
	CALL	REG2
	RET

;	mem,imm

_MOV.30:
	CALL	BYTE_WORD	;#

	CALL	REG2
	CALL	COMMA
	CALL	IMM
	RET

;	reg,imm

_MOV.40:
	CALL	BYTE_1
	MOV	AL,BH
	AND	al,0FH
	CALL	REG
	CALL	COMMA
;	BIT	3,BH
	test	bh,8
	JNE	_MOV.45
	MOV	AL,[ESI+00H]
	CALL	PUTHEX_A2
	CALL	INC_BYTE
	RET
_MOV.45:
	CALL	ISDWORD
	JE	_MOV.46

	MOV	BL,[ESI+00H]
	MOV	BH,[ESI+01H]
	CALL	PUTINT
	CALL	INC_BYTE
	CALL	INC_BYTE
	RET

_MOV.46:
	;MOV	BL,[SI+0]
	;MOV	BH,[SI+1]
	;MOV	DL,[SI+2]
	;MOV	DH,[SI+3]
	MOV	EBX,[ESI]
	CALL	PUTDINT

	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	RET

;	acc,mem

_MOV.50:
	CALL	BYTE_1
	CALL	ACC
	CALL	COMMA
	MOV	AL,'['
	CALL	PUTCHR

	CALL	IS386
	JE	_MOV.55
	MOV	BL,[ESI+00H]
	MOV	BH,[ESI+01H]
	CALL	PUTINT
_MOV.52:
	CALL	INC_BYTE
	CALL	INC_BYTE
	MOV	AL,']'
	CALL	PUTCHR
	RET
_MOV.55:
	;MOV	BL,[SI+0]
	;MOV	BH,[SI+1]
	;MOV	DL,[SI+2]
	;MOV	DH,[SI+3]
	MOV	EBX,[ESI]
	CALL	PUTDINT

	CALL	INC_BYTE
	CALL	INC_BYTE
	JMP	_MOV.52

;	mem,acc

_MOV.60:
	CALL	BYTE_1
	MOV	AL,'['
	CALL	PUTCHR
	PUSH	EBX
	CALL	IS386
	JE	_MOV.65
	MOV	BL,[ESI+00H]
	MOV	BH,[ESI+01H]
	CALL	PUTINT
_MOV.62:
	MOV	AL,']'
	CALL	PUTCHR
	CALL	COMMA
	POP	EBX
	CALL	ACC
	CALL	INC_BYTE
	CALL	INC_BYTE
	RET
_MOV.65:
	;MOV	BL,[SI+0]
	;MOV	BH,[SI+1]
	;MOV	DL,[SI+2]
	;MOV	DH,[SI+3]
	MOV	EBX,[ESI]
	CALL	PUTDINT

	CALL	INC_BYTE
	CALL	INC_BYTE
	JMP	_MOV.62

_MOV.70:
	MOV	AL,BL
	ror al,1
	ror al,1
	ror al,1
	AND	al,07H	;03H
	ADD	AL,10H
	CALL	REG
	CALL	COMMA
	MOV	AL,BL
	CMP	al,11000000B
	JNB	_MOV.75
	CALL	REG2
	RET
_MOV.75:
	MOV	AL,BL
	AND	al,07H
	OR	al,08H
	CALL	REG
	RET

_MOV.80:
	MOV	AL,BL
	CMP	al,11000000B
	JB	_MOV.82
	AND	al,07H
	OR	al,08H
	CALL	REG
	JMP	_MOV.84
_MOV.82:
	CALL	REG2
_MOV.84:
	CALL	COMMA
	MOV	AL,BL
	ror al,1
	ror al,1
	ror al,1
	AND	al,07H	;03H
	ADD	AL,10H
	CALL	REG
	RET


_OUT:	MOV	AL,@OUT
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,DH
	CMP	al,11100110B
	JNE	_OUT.10
	MOV	AL,[ESI+00H]
	CALL	PUTHEX_A2
	CALL	INC_BYTE
	JMP	_OUT.20

_OUT.10:MOV	AL,@DX
	CALL	PUTSTR

_OUT.20:
	CALL	COMMA
	CALL	ACC
	RET


_POP:	MOV	AL,DH
	CMP	al,00000111B
	JNE	_POP.1
	MOV	AL,BH
	ror al,1
	ror al,1
	ror al,1
	AND	al,03H
	CMP	al,01H
	JE	_POP.40
_POP.1:
	MOV	AL,@POP
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,DH
	CMP	al,8FH
	JE	_POP.10
	CMP	al,01011000B
	JE	_POP.20
	CMP	al,00000111B
	JE	_POP.30
_POP.10:
	CMP	BL,0C0H
	JNB	_POP.15
	CALL	BYTE_WORD
_POP.15:
	CALL	REG2
	CALL	INC_BYTE
	RET

_POP.20:MOV	AL,BH
	AND	al,07H
	OR	al,08H
	CALL	REG
	RET

_POP.30:MOV	AL,BH
	ror al,1
	ror al,1
	ror al,1
	AND	al,03H
	ADD	AL,10H
	CALL	REG
	RET

_POP.40:
	MOV	AL,'C'
	CALL	PUTCHR
	MOV	AL,'T'
	CALL	PUTCHR
	MOV	AL,'S'
	CALL	PUTCHR
	CALL	TAB2
	MOV	AL,[ESI+0]
	CALL	PUTHEX_A2
	CALL	INC_BYTE
	RET

_POPF:	MOV	AL,@POPF
	CALL	PUTSTR
	CALL	ISDWORD
	MOV	AL,'D'
;	CALL	Z,PUTCHR
	jne	_popf.nz
	call	putchr
_popf.nz:
	RET

_PUSHN:
	MOV	AL,@PUSH
	CALL	PUTSTR
	CALL	TAB

	MOV	AL,[FDWORD]
	CMP	AL,[FFDWORD]
	JE	_PUSHN.10

	MOV	BH,1		;WORD
	CALL	BYTE_WORD

_PUSHN.10:
	MOV	AL,[ESI+0]
	CALL	PUTHEX_A2
	CALL	INC_BYTE
	RET

_PUSHNN:
	MOV	AL,@PUSH
	CALL	PUTSTR
	CALL	TAB

	MOV	AL,[FDWORD]
	CMP	AL,[FFDWORD]
	JE	_PUSHNN.05

	MOV	BH,1
	CALL	BYTE_WORD

_PUSHNN.05:

	CALL	ISDWORD
	JE	_PUSHNN.10
	MOV	BL,[ESI+0]
	MOV	BH,[ESI+1]
	CALL	PUTINT
	CALL	INC_BYTE
	CALL	INC_BYTE
	RET
_PUSHNN.10:
	;MOV	BL,[SI+0]
	;MOV	BH,[SI+1]
	;MOV	DL,[SI+2]
	;MOV	DH,[SI+3]
	MOV	EBX,[ESI]
	CALL	PUTDINT

	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	RET

_PUSHFS:
	MOV	AL,@PUSH
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,@FS
	CALL	PUTSTR
	CALL	INC_BYTE
	RET
_PUSHGS:
	MOV	AL,@PUSH
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,@GS
	CALL	PUTSTR
	CALL	INC_BYTE
	RET
_POPFS:
	MOV	AL,@POP
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,@FS
	CALL	PUTSTR
	CALL	INC_BYTE
	RET
_POPGS:
	MOV	AL,@POP
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,@GS
	CALL	PUTSTR
	CALL	INC_BYTE
	RET


_PUSH:	MOV	AL,@PUSH
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,DH
	CMP	al,0FFH
	JE	_PUSH.10
	CMP	al,01010000B
	JE	_PUSH.20
	CMP	al,00000110B
	JE	_PUSH.30
_PUSH.10:
	MOV	AL,BL
	CMP	al,0C0H
;	CALL	CL,BYTE_WORD
	jnb	_push.10.nc
	call	byte_word
_push.10.nc:
	CALL	REG2
	CALL	INC_BYTE
	RET

_PUSH.20:
	MOV	AL,BH
	AND	al,07H
	OR	al,08H
	CALL	REG
	RET

_PUSH.30:MOV	AL,BH
	ror al,1
	ror al,1
	ror al,1
	AND	al,03H
	ADD	AL,10H
	CALL	REG
	RET


_PUSHF:	MOV	AL,@PUSHF
	CALL	PUTSTR
	CALL	ISDWORD
	MOV	AL,'D'
;	CALL	Z,PUTCHR
	jne	_pushf.nz
	call	putchr
_pushf.nz:
	RET

_SAHF:	MOV	AL,@SAHF
	CALL	PUTSTR
	RET

_PUSHA:	MOV	AL,@PUSH
	CALL	PUTSTR
	MOV	AL,'A'
	CALL	PUTCHR
	call	isdword
	Jne	_pusha.nz
	mov	al,'D'
	call	putchr
_pusha.nz:
	RET

_POPA:	MOV	AL,@POP
	CALL	PUTSTR
	MOV	AL,'A'
	CALL	PUTCHR
	call	isdword
	jne	_popa.nz
	mov	al,'D'
	call	putchr
_popa.nz:
	RET

_XCHG:	MOV	AL,@XCHG
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,DH
	CMP	al,100000100B
	JE	_XCHG.10
	CMP	al,10000011B
	JE	_XCHG.20
	CMP	al,10010000B
	JE	_XCHG.30

_XCHG.10:
	CALL	REG2
	CALL	COMMA
	CALL	REG1
	CALL	INC_BYTE
	RET

_XCHG.20:
	CALL	REG1
	CALL	COMMA
	CALL	REG2
	CALL	INC_BYTE
	RET

_XCHG.30:
;	MOV	AL,@AX
;	CALL	PUTSTR
	CALL	ACCAX
	CALL	COMMA
	MOV	AL,BH
	AND	al,07H
	OR	al,08H
	CALL	REG
	RET

_XLAT:	MOV	AL,@XLAT
	CALL	PUTSTR
	RET


_AND:
	CALL	INC_BYTE
	MOV	AL,@AND
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,DH
	CMP	al,00100000B
	JE	_AND.10
	CMP	al,00100010B
	JE	_AND.20
	CMP	al,10000000B
	JE	_AND.30
	CMP	al,00100100B
	JE	_AND.40

_AND.10:
	CALL	REG2
	CALL	COMMA
	CALL	REG1
	RET

_AND.20:
	CALL	REG1
	CALL	COMMA
	CALL	REG2
	RET

_AND.30:
	CMP	BL,0C0H
	JNB	_AND.31
	CALL	BYTE_WORD	;#
_AND.31:
	CALL	REG2
	CALL	COMMA
;	CALL	IMM
	CALL	S_IMM
	RET

_AND.40:
	CALL	BYTE_1
	CALL	ACC
	CALL	COMMA
;	CALL	IMM
	CALL	S_IMM
	RET


_NOT:	MOV	AL,@NOT
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,BL
	CMP	al,11000000B
;	CALL	CL,BYTE_WORD
	jnb	_not.nc
	call	byte_word
_not.nc:
	CALL	REG2
	CALL	INC_BYTE
	RET


_OR:	CALL	INC_BYTE
	MOV	AL,@OR
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,DH
	CMP	al,00001000B
	JE	_OR.10
	CMP	al,00001010B
	JE	_OR.20
	CMP	al,10000000B
	JE	_OR.30
	CMP	al,00001100B
	JE	_OR.40

_OR.10:
	CALL	REG2
	CALL	COMMA
	CALL	REG1
	RET

_OR.20:
	CALL	REG1
	CALL	COMMA
	CALL	REG2
	RET

_OR.30:
	CMP	BL,0C0H
	JNB	_OR.31
	CALL	BYTE_WORD	;#
_OR.31:
	CALL	REG2
	CALL	COMMA
;	CALL	IMM
	CALL	S_IMM
	RET

_OR.40:
	CALL	BYTE_1
	CALL	ACC
	CALL	COMMA
;	CALL	IMM
	CALL	S_IMM
	RET

;
_SHRD:
	MOV	AL,@SHR
	CALL	PUTSTR
	JMP	_SHLD.0

_SHLD:	MOV	AL,@SHL
	CALL	PUTSTR
_SHLD.0:
	MOV	AL,'D'
	CALL	PUTCHR
	CALL	TAB
	CALL	INC_BYTE
	MOV	BH,[ESI+0]
	PUSH	EBX
	INC	ESI
	MOV	BH,[ESI+0]
	MOV	AL,BH
	SHR	AL,3
	AND	AL,7
	ADD	AL,8
	PUSH	EAX
	MOV	AL,BH
	AND	AL,0C0H
	CMP	AL,0C0H
	JE	_SHLD.10

	MOV	BL,BH
	CALL	REG2
	CALL	COMMA
	POP	EAX
	CALL	REG
	CALL	COMMA
_SHLD.03:
	POP	EBX
	TEST	BH,1
	JNE	_SHLD.05

	MOV	AL,[ESI+0]
	CALL	PUTHEX_A2
	CALL	INC_BYTE
	CALL	INC_BYTE
	RET

_SHLD.05:
	MOV	AL,@CL
	CALL	PUTSTR
	CALL	INC_BYTE
	RET

_SHLD.10:
	MOV	AL,BH
	AND	AL,7
	ADD	AL,8
	CALL	REG
	CALL	COMMA
	POP	EAX
	CALL	REG
	CALL	COMMA
	INC	ESI
	JMP	_SHLD.03

;
_BTX:
	INC	ESI
	MOV	BL,[ESI]

	MOV	AL,BL
	SHR	AL,3
	AND	AL,7
	CMP	AL,4
	JE	BT_I
	CMP	AL,5
	JE	BTS_I
	CMP	AL,6
	JE	BTR_I
	CMP	AL,7
	JE	BTC_I
	JMP	UNDEF

BTS_I:
	PUSH	EBX
	MOV	AL,@BT
	CALL	PUTSTR
	MOV	AL,'S'
	CALL	PUTSTR
	JMP	BT_I.0

BTC_I:

	PUSH	EBX
	MOV	AL,@BT
	CALL	PUTSTR
	MOV	AL,'C'
	CALL	PUTCHR
	JMP	BT_I.0

BTR_I:
	PUSH	EBX
	MOV	AL,@BT
	CALL	PUTSTR
	MOV	AL,'R'
	CALL	PUTCHR
	JMP	BT_I.0

BT_I:
	PUSH	EBX
	MOV	AL,@BT
	CALL	PUTSTR
BT_I.0:
	CALL	TAB
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE

	POP	EBX
	CALL	REG2
	CALL	COMMA

	MOV	AL,[ESI]
	CALL	PUTHEX_A2
	RET

;
_BTC:
	MOV	AL,@BT
	CALL	PUTSTR
	MOV	AL,'C'
	CALL	PUTCHR
	JMP	_BT.0

_BTR:
	MOV	AL,@BT
	CALL	PUTSTR
	MOV	AL,'R'
	CALL	PUTCHR
	JMP	_BT.0

_BTS:
	MOV	AL,@BT
	CALL	PUTSTR
	MOV	AL,'S'
	CALL	PUTCHR
	JMP	_BT.0

;
_BT:
	MOV	AL,@BT
	CALL	PUTSTR
	CALL	TAB
_BT.0:
	CALL	INC_BYTE	;add 3-1
	CALL	INC_BYTE

	INC	ESI
	MOV	BL,[ESI]
	PUSH	EBX
	CALL	REG2
	CALL	COMMA
	POP	EAX
	SHR	AL,3
	AND	AL,7
	ADD	AL,8
	CALL	REG
	RET



_RCL:	MOV	AL,@RCL
	CALL	PUTSTR
	JMP	ROT_SHIFT

_RCR:	MOV	AL,@RCR
	CALL	PUTSTR
	JMP	ROT_SHIFT

_ROL:	MOV	AL,@ROL
	CALL	PUTSTR
	JMP	ROT_SHIFT

_ROR:	MOV	AL,@ROR
	CALL	PUTSTR
	JMP	ROT_SHIFT

_SAL:	MOV	AL,@SAL
	CALL	PUTSTR
	JMP	ROT_SHIFT

_SAR:	MOV	AL,@SAR
	CALL	PUTSTR
	JMP	ROT_SHIFT

_SHR:	MOV	AL,@SHR
	CALL	PUTSTR
	JMP	ROT_SHIFT

ROT_SHIFT:
	CALL	INC_BYTE
	CALL	TAB
	MOV	AL,BL
	CMP	al,11000000B
;	CALL	CL,BYTE_WORD
	jnb	rot_shift.nc
	call	byte_word
rot_shift.nc:
;	BIT	1,BH
	test	bh,2
	JNE	ROT_SHIFT.10
	CALL	REG2
	CALL	COMMA
	MOV	AL,'1'
	CALL	PUTCHR
	RET
ROT_SHIFT.10:
	CALL	REG2
	CALL	COMMA
	MOV	AL,@CL
	CALL	PUTSTR
	RET


ROL2:	MOV	AL,BL
	ror al,1
	ror al,1
	ror al,1
	AND	al,07H
	CMP	al,000B
	MOV	DH,@ROL
	JE	ROL2.10
	CMP	al,001B
	MOV	DH,@ROR
	JE	ROL2.10
	CMP	al,010B
	MOV	DH,@RCL
	JE	ROL2.10
	CMP	al,011B
	MOV	DH,@RCR
	JE	ROL2.10
	CMP	al,100B
	MOV	DH,@SAL
	JE	ROL2.10
	CMP	al,101B
	MOV	DH,@SHR
	JE	ROL2.10
	CMP	al,111B
	MOV	DH,@SAR
	JE	ROL2.10

ROL2.10:
	MOV	AL,DH
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,BL
	CMP	al,11000000B
;	CALL	CL,BYTE_WORD
	jnb	rol2.10.nc
	call	byte_word
rol2.10.nc:
	CALL	REG2
	CALL	COMMA
	MOV	AL,[ESI+0]
	CALL	PUTHEX_A2
	CALL	INC_BYTE
	CALL	INC_BYTE
	RET


_TEST:	CALL	INC_BYTE
	MOV	AL,@TEST
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,DH
	CMP	al,10000100B
	JE	_TEST.10
	CMP	al,10000110B
	JE	_TEST.20
	CMP	al,11110110B
	JE	_TEST.30
	CMP	al,10101000B
	JE	_TEST.40

_TEST.10:
	CALL	REG2
	CALL	COMMA
	CALL	REG1
	RET

_TEST.20:
	CALL	REG1
	CALL	COMMA
	CALL	REG2
	RET

_TEST.30:
	CALL	REG2
	CALL	COMMA
	CALL	IMM
	RET

_TEST.40:
	CALL	BYTE_1
	CALL	ACC
	CALL	COMMA
	CALL	IMM
	RET


_XOR:	CALL	INC_BYTE
	MOV	AL,@XOR
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,DH
	CMP	al,00110000B
	JE	_XOR.10
	CMP	al,00110010B
	JE	_XOR.20
	CMP	al,10000000B
	JE	_XOR.30
	CMP	al,00110100B
	JE	_XOR.40

_XOR.10:
	CALL	REG2
	CALL	COMMA
	CALL	REG1
	RET

_XOR.20:
	CALL	REG1
	CALL	COMMA
	CALL	REG2
	RET

_XOR.30:
	CMP	BL,0C0H
	JNB	_XOR.31
	CALL	BYTE_WORD	;#
_XOR.31:
	CALL	REG2
	CALL	COMMA
;	CALL	IMM
	CALL	S_IMM
	RET

_XOR.40:
	CALL	BYTE_1
	CALL	ACC
	CALL	COMMA
;	CALL	IMM
	CALL	S_IMM
	RET


_CALL:	MOV	AL,@CALL
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,BH
	CMP	al,0E8H
	JE	_CALL.10
	CMP	al,9AH
	JE	_CALL.20
	CMP	al,0FFH
	JE	_CALL.30

_CALL.10:
	CALL	IS386
	JE	_CALL.15

	PUSH	ESI
	POP	EBX
	INC	EBX
	INC	EBX
	MOV	EDX,[FILE1_CONTENTS_MEMORY]	;WORK
	SUB	EBX,EDX
	MOV	EDX,[OFFSET]
	ADD	EBX,EDX
	MOV	DX,[ESI+00H]
	;MOVZX	EDX,DX
	MOVSX	EDX,DX
	ADD	EBX,EDX
	CALL	PUTINT
	CALL	INC_BYTE
	CALL	INC_BYTE
	RET

_CALL.15:
	PUSH	ESI
	POP	EBX
	INC	EBX
	INC	EBX
	INC	EBX
	INC	EBX

	CMP	BYTE [FLG.L],0
	JNE	_CALL.15L

	MOV	EDX,[FILE1_CONTENTS_MEMORY]	;WORK
	SUB	EBX,EDX
	MOV	EDX,[OFFSET]
	ADD	EBX,EDX
	MOV	DX,[ESI+0]
	;MOVZX	EDX,DX
	MOVSX	EDX,DX
	ADD	EBX,EDX
	;CALL	PUTINT
	CALL	PUT_INT_DINT
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	RET

_CALL.15L:
	MOV	EDX,[FILE1_CONTENTS_MEMORY]	;WORK
	;MOVZX	EBX,BX
	SUB	EBX,EDX
	ADD	EBX,[OFFSET]
	ADD	EBX,[ESI]

	MOV	EDX,EBX
	SHR	EDX,10H
	CALL	PUTDINT

	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	RET

_CALL.20:
	CALL	IS386
	JE	_CALL.25
	MOV	BL,[ESI+02H]
	MOV	BH,[ESI+03H]
	CALL	PUTINT
	MOV	AL,':'
	CALL	PUTCHR
	MOV	BL,[ESI+00H]
	MOV	BH,[ESI+01H]
	CALL	PUTINT
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	RET

_CALL.25:
	MOV	BL,[ESI+4]
	MOV	BH,[ESI+5]
	CALL	PUTINT
	MOV	AL,':'
	CALL	PUTCHR

	;MOV	BL,[SI+0]
	;MOV	BH,[SI+1]
	;MOV	DL,[SI+2]
	;MOV	DH,[SI+3]
	MOV	EBX,[ESI]
	CALL	PUTDINT

	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	RET

_CALL.30:
	CALL	INC_BYTE
	MOV	AL,BL
	AND	al,11111000B
	CMP	al,11010000B
	JE	_CALL.32
	AND	al,00111000B
	CMP	al,00010000B
	JE	_CALL.34
	CMP	al,00011000B
	JE	_CALL.36

_CALL.32:
	MOV	AL,BL
	AND	al,07H
	OR	al,08H
	CALL	REG
	RET

_CALL.34:
	CALL	REG2
	RET

_CALL.36:
	MOV	AL,@FAR
	CALL	PUTSTR
	CALL	REG2
	RET


_INT:	MOV	AL,@INT
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,BH
	CMP	al,0CCH
	JNE	_INT.10

	MOV	AL,03H
	CALL	PUTHEX_A2
	RET
_INT.10:
	MOV	AL,[ESI+00H]
	CALL	PUTHEX_A2
	CALL	INC_BYTE
	RET


_INTO:	MOV	AL,@INTO
	CALL	PUTSTR
	RET


_IRET:	MOV	AL,@IRET
	CALL	PUTSTR
	RET

_JNEAR:
	MOV	AL,BL
	AND	al,0FH
	CMP	al,00H
	MOV	DH,@JO
	JE	JN
	CMP	al,01H
	MOV	DH,@JNO
	JE	JN
	CMP	al,02H
	MOV	DH,@JB
	JE	JN
	CMP	al,03H
	MOV	DH,@JAE
	JE	JN
	CMP	al,04H
	MOV	DH,@JE
	JE	JN
	CMP	al,05H
	MOV	DH,@JNE
	JE	JN
	CMP	al,06H
	MOV	DH,@JBE
	JE	JN
	CMP	al,07H
	MOV	DH,@JA
	JE	JN
	CMP	al,08H
	MOV	DH,@JS
	JE	JN
	CMP	al,09H
	MOV	DH,@JNS
	JE	JN
	CMP	al,0AH
	MOV	DH,@JP
	JE	JN
	CMP	al,0BH
	MOV	DH,@JNP
	JE	JN
	CMP	al,0CH
	MOV	DH,@JL
	JE	JN
	CMP	al,0DH
	MOV	DH,@JGE
	JE	JN
	CMP	al,0EH
	MOV	DH,@JLE
	JE	JN
	CMP	al,0FH
	MOV	DH,@JG
	JE	JN

JN:	MOV	AL,DH
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,@NEAR
	CALL	PUTSTR
	MOV	AL,' '
	CALL	PUTCHR

	CALL	ISDWORD
	JE	JN.10

	PUSH	ESI
	POP	EBX
	INC	EBX
	INC	EBX
	INC	EBX
	MOV	EDX,[FILE1_CONTENTS_MEMORY]	;WORK
	SUB	EBX,EDX
	MOV	EDX,[OFFSET]
	ADD	EBX,EDX
	MOV	DX,[ESI+01H]
	MOVZX	EDX,DX
	ADD	EBX,EDX

	CALL	PUTINT
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	RET
JN.10:
	PUSH	ESI
	POP	EBX
	INC	EBX
	INC	EBX
	INC	EBX
	INC	EBX
	INC	EBX
	MOV	EDX,[FILE1_CONTENTS_MEMORY]	;WORK
	SUB	EBX,EDX
	;MOV	DX,[OFFSET]
	;MOVZX	EDX,DX
	MOV	EDX,[OFFSET]
	ADD	EBX,EDX
	MOV	DX,[ESI+1]
	;MOVZX	EDX,DX
	MOVSX	EDX,DX
	ADD	EBX,EDX

	;CALL	PUTINT
	CALL	PUT_INT_DINT
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	RET

_JA:	MOV	AL,@JA
	JMP	SHORT_

_JAE:	MOV	AL,@JAE
	JMP	SHORT_

_JB:	MOV	AL,@JB
	JMP	SHORT_

_JBE:	MOV	AL,@JBE
	JMP	SHORT_

_JCXZ:	MOV	AL,@JCXZ
	JMP	SHORT_

_JE:	MOV	AL,@JE
	JMP	SHORT_

_JG:	MOV	AL,@JG
	JMP	SHORT_

_JGE:	MOV	AL,@JGE
	JMP	SHORT_

_JL:	MOV	AL,@JL
	JMP	SHORT_

_JLE:	MOV	AL,@JLE
	JMP	SHORT_

_JMP:	MOV	AL,BH
	CMP	al,0EBH
	JE	_JMP.05
	MOV	AL,@JMP
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,BH
	CMP	al,0E9H
	JE	_JMP.10
	CMP	al,0EAH
	JE	_JMP.20
	CMP	al,0FFH
	JE	_JMP.30

;	jmp short

_JMP.05:
	MOV	AL,@JMP
	JMP	SHORT_

;	jmp near

_JMP.10:
	CALL	IS386
	JE	_JMP.15

	PUSH	ESI
	POP	EBX
	INC	EBX
	INC	EBX
	MOV	EDX,[FILE1_CONTENTS_MEMORY]	;WORK
	SUB	EBX,EDX
	MOV	EDX,[OFFSET]
	ADD	EBX,EDX
	MOV	DX,[ESI+00H]
	;MOVZX	EDX,DX
	MOVSX	EDX,DX
	ADD	EBX,EDX
	CALL	PUTINT
	CALL	INC_BYTE
	CALL	INC_BYTE
	RET

_JMP.15:
	PUSH	ESI
	POP	EBX
	INC	EBX
	INC	EBX
	INC	EBX
	INC	EBX
	MOV	EDX,[FILE1_CONTENTS_MEMORY]	;WORK
	SUB	EBX,EDX
	MOV	EDX,[OFFSET]
	ADD	EBX,EDX
	MOV	DX,[ESI+0]
	;MOVZX	EDX,DX
	MOVSX	EDX,DX
	ADD	EBX,EDX
	;CALL	PUTINT
	CALL	PUT_INT_DINT
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	RET

_JMP.20:
	MOV	BX,[ESI+02H]
	CALL	PUTINT
	MOV	AL,':'
	CALL	PUTCHR
	MOV	BX,[ESI+00H]
	CALL	PUTINT
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	RET

_JMP.30:
	MOV	AL,BL
	AND	al,11111000B
	CMP	al,11100000B
	JE	_JMP.32
	AND	al,00111000B
	CMP	al,00100000B
	JE	_JMP.34
	CMP	al,00101000B
	JE	_JMP.36

_JMP.32:
	MOV	AL,BL
	AND	al,07H
	OR	al,08H
	CALL	REG
	CALL	INC_BYTE
	RET

_JMP.34:
	CALL	REG2
	CALL	INC_BYTE	;#
	RET

_JMP.36:
	MOV	AL,@FAR
	CALL	PUTSTR
	CALL	TAB
	CALL	REG2
	CALL	INC_BYTE
	RET

_JNE:	MOV	AL,@JNE
	JMP	SHORT_

_JNO:	MOV	AL,@JNO
	JMP	SHORT_

_JNP:	MOV	AL,@JNP
	JMP	SHORT_

_JNS:	MOV	AL,@JNS
	JMP	SHORT_

_JO:	MOV	AL,@JO
	JMP	SHORT_

_JP:	MOV	AL,@JP
	JMP	SHORT_

_JS:	MOV	AL,@JS
	JMP	SHORT_

_LOOP:	MOV	AL,@LOOP
	JMP	SHORT_

_LOOPE:	MOV	AL,@LOOPE
	JMP	SHORT_

_LOOPNE:MOV	AL,@LOOPNE
	JMP	SHORT_



SHORT_:
	CALL	PUTSTR
	CALL	TAB
	CALL	INC_BYTE
	PUSH	EBX

	MOV	AL,[ESI+00H]
	INC	ESI
	PUSH	ESI
	POP	EBX
	MOV	EDX,[FILE1_CONTENTS_MEMORY]	;WORK
	SUB	EBX,EDX
	MOV	EDX,[OFFSET]
	ADD	EBX,EDX
	CMP	al,80H
	JNB	SHORT_.10
	MOV	DH,0
	MOV	DL,AL
	JMP	SHORT_.20
SHORT_.10:
	MOV	DH,0FFH
	MOV	DL,AL
SHORT_.20:
	ADD	BX,DX
	;CALL	PUTINT
	CALL	PUT_INT_DINT
	POP	EBX
	RET


_RET:	MOV	AL,@RET
	CALL	PUTSTR
	;BIT	3,BH
	test	bh,8
;	MOV	AL,@FAR
;	CALL	NZ,PUTSTR
	MOV	AL,'F'
	;CALL	NZ,PUTCHR
	je	_ret.z
	call	putchr
_ret.z:
;	BIT	0,BH
	test	bh,1
	JE	_RET.10
	RET
_RET.10:
	CALL	TAB
	MOV	BL,[ESI+00H]
	MOV	BH,[ESI+01H]
	CALL	PUTHEX2
	MOV	AL,'H'
	CALL	PUTCHR
	CALL	INC_BYTE
	CALL	INC_BYTE
	RET


_CMPSB:	MOV	AL,@CMPSB
	CALL	PUTSTR
	RET

_CMPSW:	MOV	AL,@CMPS
	CALL	PUTSTR
	JMP	_MOVSW.10

_LODSB:	MOV	AL,@LODSB
	CALL	PUTSTR
	RET

_LODSW:	MOV	AL,@LODS
	CALL	PUTSTR
	JMP	_MOVSW.10

_MOVSB:	MOV	AL,@MOVSB
	CALL	PUTSTR
	RET

_MOVSW:	MOV	AL,@MOVS
	CALL	PUTSTR
_MOVSW.10:
	CALL	ISDWORD
	MOV	AL,'W'
;	JNE	$+4
	jne	_movsw.10.p4
	MOV	AL,'D'
_movsw.10.p4:
	CALL	PUTCHR
	RET

_SCASB:	MOV	AL,@SCASB
	CALL	PUTSTR
	RET

_SCASW:	MOV	AL,@SCAS
	CALL	PUTSTR
	JMP	_MOVSW.10

_STOSB:	MOV	AL,@STOSB
	CALL	PUTSTR
	RET

_STOSW:	MOV	AL,@STOS
	CALL	PUTSTR
	JMP	_MOVSW.10

_REP:	MOV	AL,@REP
	CALL	PUTSTR
	RET

_REPNE:	MOV	AL,@REPNE
	CALL	PUTSTR
	RET

_CLC:	MOV	AL,@CLC
	CALL	PUTSTR
	RET

_CLD:	MOV	AL,@CLD
	CALL	PUTSTR
	RET

_CLI:	MOV	AL,@CLI
	CALL	PUTSTR
	RET

_CMC:	MOV	AL,@CMC
	CALL	PUTSTR
	RET

_STC:	MOV	AL,@STC
	CALL	PUTSTR
	RET

_STD:	MOV	AL,@STD
	CALL	PUTSTR
	RET

_STI:	MOV	AL,@STI
	CALL	PUTSTR
	RET

_ESC:	CALL	INC_BYTE
	MOV	AL,@ESC
	CALL	PUTSTR
	CALL	TAB
	MOV	AL,BH
	AND	al,07H
	PUSH	EDX
	ADD	AL,AL
	ADD	AL,AL
	ADD	AL,AL
	MOV	DL,AL
	MOV	AL,BL
	ror al,1
	ror al,1
	ror al,1
	AND	al,07H
	OR	AL,DL
	POP	EDX
	CALL	PUTHEX_A2
	CALL	COMMA
	CALL	REG2
	RET

_HLT:	MOV	AL,@HLT
	CALL	PUTSTR
	RET

_LOCK:	MOV	AL,@LOCK
	CALL	PUTSTR
	RET

_NOP:	MOV	AL,@NOP
	CALL	PUTSTR
	RET

_WAIT:	MOV	AL,@WAIT
	CALL	PUTSTR
	RET

_CS:	MOV	AL,@CS_OV
	CALL	PUTSTR

_CS.10:	POP	EBX
	JMP	MAIN_N3

_DS:	MOV	AL,@DS_OV
	CALL	PUTSTR
	JMP	_CS.10

_ES:	MOV	AL,@ES_OV
	CALL	PUTSTR
	JMP	_CS.10

_SS:	MOV	AL,@SS_OV
	CALL	PUTSTR
	JMP	_CS.10

_FS:	MOV	AL,@FS_OV
	CALL	PUTSTR
	JMP	_CS.10

_GS:	MOV	AL,@GS_OV
	CALL	PUTSTR
	JMP	_CS.10


_66:	MOV	AL,[FDWORD]
	not	al
	MOV	[FDWORD],AL

_66.10:	POP	EBX
	JMP	MAIN_N2

_67:	MOV	AL,[F386]
	not	al
	MOV	[F386],AL
	JMP	_66.10

;
;
;

_ENTER:	MOV	AL,@ENTER
	CALL	PUTSTR
	CALL	TAB

	MOV	BX,[ESI]
	CALL	PUTINT
	CALL	COMMA
	MOV	AL,[ESI+2]
	CALL	PUTHEX_A2
	CALL	INC_BYTE
	CALL	INC_BYTE
	CALL	INC_BYTE
	RET

_LEAVE:	MOV	AL,@LEAVE
	CALL	PUTSTR
	RET



#INCLUDE <DIS38603.ASM>

#INCLUDE <DIS38602.ASM>

_TEXT_FILL:
	;ds	HEADER+0600h-$
	ALIGN	FILE_ALIGN	;200h

;#define STD_INPUT_HANDLE    ((DWORD)-10)
;#define STD_OUTPUT_HANDLE   ((DWORD)-11)
;#define STD_ERROR_HANDLE    ((DWORD)-12)

_TEXT_END:



;------------------------------------

_RDATA:

;+600	".rdata" ->2000h-

;<- #c IMAGE_DIRECTORY_ENTRY_IAT
;<- 0:FirstThunk

;Import Address Table
ENTRY_IAT:

IAT_GetStdHandle:
;IAT_GetStdHandle EQU $-_RDATA+_RDATA_RVA+BASE
	DD	ENTRY_GetStdHandle-_RDATA+_RDATA_RVA	;0000204ch	;DW	0264h / DB	"GetStdHandle",0
IAT_WriteFile:
	DD	ENTRY_WriteFile-_RDATA+_RDATA_RVA	;00002040h	;DW	0525h /	DB	"WriteFile", 0
IAT_ReadFile:
	DD	ENTRY_ReadFile-_RDATA+_RDATA_RVA
IAT_CreateFileA:
	DD	ENTRY_CreateFileA-_RDATA+_RDATA_RVA
IAT_CloseHandle:
	DD	ENTRY_CloseHandle-_RDATA+_RDATA_RVA
IAT_ExitProcess:
	DD	ENTRY_ExitProcess-_RDATA+_RDATA_RVA
IAT_GetCommandLineA:
	DD	ENTRY_GetCommandLineA-_RDATA+_RDATA_RVA
IAT_SetFilePointer:
	DD	ENTRY_SetFilePointer-_RDATA+_RDATA_RVA
IAT_SetEndOfFile:
	DD	ENTRY_SetEndOfFile-_RDATA+_RDATA_RVA
IAT_GlobalAlloc:
	DD	ENTRY_GlobalAlloc-_RDATA+_RDATA_RVA
IAT_GlobalFree:
	DD	ENTRY_GlobalFree-_RDATA+_RDATA_RVA

	DD	00000000h

ENTRY_IAT_END:

;<- #1 IMAGE_DIRECTORY_ENTRY_IMPORT

ENTRY_IMPORT:
;+60c	(200ch)
	DD	ENTRIES_0-_RDATA+_RDATA_RVA	;00002034h	;Characteristics
;+610
	DD	00000000h	;TimeDateStamp
	DD	00000000h	;ForwarderChain
	DD	DLLNAME_KERNEL32-_RDATA+_RDATA_RVA	;0000205ch	;Name = "KERNEL32.dll", 0
	DD	_RDATA_RVA	;00002000h	;FirstThunk
						;== ENTRY_IAT-_RDATA+_RDATA_RVA
;+620
	DD	00000000h	;Characteristics
	DD	00000000h
	DD	00000000h
	DD	00000000h
;+630
	DD	00000000h	;FirstThunk
ENTRY_IMPORT_END:

ENTRIES_0:
;+634	(2034h) <- 0:Characteristics
	DD	ENTRY_GetStdHandle-_RDATA+_RDATA_RVA	;0000204ch	;DW	0264h / DB	"GetStdHandle",0
	DD	ENTRY_WriteFile-_RDATA+_RDATA_RVA	;00002040h	;DW	0525h / DB	"WriteFile", 0
	DD	ENTRY_ReadFile-_RDATA+_RDATA_RVA
	DD	ENTRY_CreateFileA-_RDATA+_RDATA_RVA
	DD	ENTRY_CloseHandle-_RDATA+_RDATA_RVA
	DD	ENTRY_ExitProcess-_RDATA+_RDATA_RVA
	DD	ENTRY_GetCommandLineA-_RDATA+_RDATA_RVA
	DD	ENTRY_SetFilePointer-_RDATA+_RDATA_RVA
	DD	ENTRY_SetEndOfFile-_RDATA+_RDATA_RVA
	DD	ENTRY_GlobalAlloc-_RDATA+_RDATA_RVA
	DD	ENTRY_GlobalFree-_RDATA+_RDATA_RVA

	DD	00000000h

ENTRY_GlobalFree:
	DW	0
	DB	"GlobalFree",0
	ALIGN	4

ENTRY_GlobalAlloc:
	DW	0
	DB	"GlobalAlloc",0
	ALIGN	4

ENTRY_SetEndOfFile:
	DW	0
	DB	"SetEndOfFile", 0
	ALIGN	4

ENTRY_SetFilePointer:
	DW	0
	DB	"SetFilePointer", 0
	ALIGN	4

ENTRY_GetCommandLineA:
	DW	0
	DB	"GetCommandLineA", 0
	ALIGN	4

ENTRY_ExitProcess:
	DW	0
	DB	"ExitProcess",0
	ALIGN	4

ENTRY_CloseHandle:
	DW	0
	DB	"CloseHandle", 0
	ALIGN	4

ENTRY_CreateFileA:
	DW	0
	DB	"CreateFileA", 0
	ALIGN	4

ENTRY_ReadFile:
	DW	0
	DB	"ReadFile", 0
	ALIGN	4

;+640	(2040h)
ENTRY_WriteFile:
	DW	0525h
	DB	"WriteFile", 0

;+64c	(204ch)
ENTRY_GetStdHandle:
	DW	0264h
	DB	"GetStdHandle",0
	DB	0

;+65c	(205ch)
DLLNAME_KERNEL32:
	DB	"KERNEL32.dll", 0
	DB	0,0,0


;//
;// Debug Format
;//
;
;typedef struct _IMAGE_DEBUG_DIRECTORY {
;    DWORD   Characteristics;
;    DWORD   TimeDateStamp;
;    WORD    MajorVersion;
;    WORD    MinorVersion;
;    DWORD   Type;
;    DWORD   SizeOfData;
;    DWORD   AddressOfRawData;
;    DWORD   PointerToRawData;
;} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;

IMAGE_DEBUG_TYPE_COFF	EQU             1

	ALIGN	32

ENTRY_DEBUG:
__IMAGE_DEBUG_DIRECTORY__:
	DD	0	;Characteristics
	DD	529037aeh	;TimeDateStamp
	DW	0	;MajorVersion
	DW	0	;MinorVersion
	DD	IMAGE_DEBUG_TYPE_COFF	;Type

	;DD	_DEBUG_END-_DEBUG_HEADER1 ;-18	;SizeOfData;
	;DD	_DEBUG_FILL-_DEBUG_HEADER1 ;-18	;SizeOfData;
	DD	_DEBUG_NAME_END-_DEBUG_HEADER1

	DD	0  ;_DEBUG_HEADER1-_DEBUG+_DEBUG_RVA	;AddressOfRawData
	;DD	_DEBUG_HEADER1-_DEBUG;-BASE	;PointerToRawData
	DD	_DEBUG_HEADER1-BASE
	;DD	0ff000000h

;
;http://msdn.microsoft.com/en-us/library/windows/desktop/ms680307%28v=vs.85%29.aspx
;
;SizeOfData
;    The size of the debugging information, in bytes. This value does not include the debug directory itself.
;
;AddressOfRawData
;    The address of the debugging information when the image is loaded, relative to the image base.
;
;PointerToRawData
;    A file pointer to the debugging information.


;IMAGE_DEBUG_DIRECTORY	size=1ch

;---------


_RDATA_FILL:
	;ds	HEADER+0800h-$
	ALIGN	FILE_ALIGN	;200h

_RDATA_END:

;-----------------------

_DATA:

;+800	".data" ->3000h-

STR_HELLO:
	DB	"Hello, World!", 0ah, 0

FILENAME_TEST1:
	DB	"CreateFileTest.txt", 0

	ALIGN	4

N_WROTE:DD	0

HDL_STDIN:DD	0
HDL_STDOUT:DD	0
HDL_STDERR:DD	0

HDL_OUTFILE:DD	0

N_READ:DD	0

PUTCHR_BUF:DS	1

CLINE:	DS	100H

CMDLINE:ds	4

READ_BUF:	ds	200

;USRDMA:

;
MON_ADRS:DS	4
MON_LINE:DS	4
MON_LINECNT:DS	4

INPUT_WORK:
	DB	70,70
	DS	200H

_MOVCR.0.STR:
	DB	@CR

_MOVCR2.0.STR:
	DB	@CR


FLG.L:	DS	4
FLG.M:	DS	4


OUT_FLG:DS	1

NO_PASS1:DS	1

FF386:	DS	1
F386:	DS	1

FFDWORD:DS	1
FDWORD:	DS	1

WRVDP:	DS	1

PASS:	DS	1

X:	DS	1
MAX_X:	DS	1
BUFFER:	DS	200


OFFSET:	DS	4	;File Top OFFSET ADDRESS

PNT:	DS	4	;Get Data Pointer in Memory  WORK ~ WORK+SIZE-1

TOP_ADR:DS	4
END_ADR:DS	4	;Dis-assemble END ADDRESS  OFFSET+SIZE-1
ADR:	DS	4	;Current ADDRESS  OFFSET ~ END ADDRESS

COUNT:	DS	1

BYTES:	DS	1

CODE:	DS	1

;	file

FILE1:	DS	130;25H
FILE2:	DS	130;25H

FILE1_SIZE:	DS	4

R_LEFT:	DS	4
R_PNT:	DS	4
R_FLG:	DS	1

W_LEFT:	DS	4
W_PNT:	DS	4

W_WORK:	DS	WRITE_BYTES

FILE_SIZE_CNT:DS	4
CUT_SIZE:	DS	4

str_001:db	'.001',0

hdl1:	ds	4
hdl2:	ds	4

ext_pnt:ds	4
;vram_seg:ds	4

LABEL_MEMORY:	DS	4
LABEL_MEMORY_END:	DS	4

FILE1_CONTENTS_MEMORY:	DS	4
FILE1_CONTENTS_MEMORY_END:	DS	4

READ_BUFFER:
	DS	READ_BYTES
;

;WORK:	DS	10000H


_DATA_FILL:
	;ds	HEADER+0a00h-$
	ALIGN	FILE_ALIGN	;200h

_DATA_END:



;--------------

_DEBUG:



_DEBUG_FILL:
;	DB	0

	ALIGN	FILE_ALIGN

_DEBUG_END:




	ALIGN	FILE_ALIGN
;-------------------

HEADER_END:




	ALIGN FILE_ALIGN






;IMAGE_COFF_SYMBOLS_HEADER
_DEBUG_HEADER1:
	DD	4	;NumberOfSymbols
	DD	_SYM1-_DEBUG_HEADER1	;LvaToFirstSymbol
	DD	0	;NumberOfLinenumbers
	DD	0	;LvaToFirstLinenumber

	DD	_TEXT_RVA	;RvaToFirstByteOfCode
	DD	_TEXT_END-1-_TEXT+_TEXT_RVA	;RvaToLastByteOfCode
	DD	_DATA_RVA	;RvaToFirstByteOfData
	DD	_DATA_END-1-_DATA+_DATA_RVA	;RvaToLastByteOfData






_SYM1:
	DB	'header',0,0	;ShortName
	DD	0	;Value
	DW	-2	;SectionNumber
	DW	0	;Type
	DB	2	;StorageClass
	DB	0	;NumberOfAuxSymbols
_DEBUG_NAME_END:

	DB	'_start',0,0	;ShortName
	DD	00001000h	;Value
	DW	1	;SectionNumber
	DW	0	;Type
	DB	2	;StorageClass
	DB	0	;NumberOfAuxSymbols

	DB	'hogehoge'
	DD	12345678h;00001000h	;Value
	DW	1	;SectionNumber
	DW	0	;Type
	DB	2	;StorageClass
	DB	0	;NumberOfAuxSymbols



	DB	'end',0, 0,0,0,0
	DD	4000h
	DW	-2
	DW	0
	DB	2
	DB	0




	ds	700h




